// source: sk8l.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb = require('./k8s.io/apimachinery/pkg/apis/meta/v1/generated_pb.js');
goog.object.extend(proto, k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb);
var k8s_io_api_batch_v1_generated_pb = require('./k8s.io/api/batch/v1/generated_pb.js');
goog.object.extend(proto, k8s_io_api_batch_v1_generated_pb);
var k8s_io_api_core_v1_generated_pb = require('./k8s.io/api/core/v1/generated_pb.js');
goog.object.extend(proto, k8s_io_api_core_v1_generated_pb);
var sk8l_custom_pb = require('./sk8l_custom_pb.js');
goog.object.extend(proto, sk8l_custom_pb);
goog.exportSymbol('proto.sk8l.ContainerCommands', null, global);
goog.exportSymbol('proto.sk8l.ContainerResponse', null, global);
goog.exportSymbol('proto.sk8l.CronjobPodsRequest', null, global);
goog.exportSymbol('proto.sk8l.CronjobPodsResponse', null, global);
goog.exportSymbol('proto.sk8l.CronjobRequest', null, global);
goog.exportSymbol('proto.sk8l.CronjobResponse', null, global);
goog.exportSymbol('proto.sk8l.CronjobYAMLResponse', null, global);
goog.exportSymbol('proto.sk8l.CronjobsRequest', null, global);
goog.exportSymbol('proto.sk8l.CronjobsResponse', null, global);
goog.exportSymbol('proto.sk8l.JobRequest', null, global);
goog.exportSymbol('proto.sk8l.JobResponse', null, global);
goog.exportSymbol('proto.sk8l.JobYAMLResponse', null, global);
goog.exportSymbol('proto.sk8l.PodRequest', null, global);
goog.exportSymbol('proto.sk8l.PodResponse', null, global);
goog.exportSymbol('proto.sk8l.PodYAMLResponse', null, global);
goog.exportSymbol('proto.sk8l.TerminatedContainers', null, global);
goog.exportSymbol('proto.sk8l.TerminationReason', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.CronjobsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sk8l.CronjobsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.CronjobsRequest.displayName = 'proto.sk8l.CronjobsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.CronjobRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sk8l.CronjobRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.CronjobRequest.displayName = 'proto.sk8l.CronjobRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.CronjobPodsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sk8l.CronjobPodsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.CronjobPodsRequest.displayName = 'proto.sk8l.CronjobPodsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.JobRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sk8l.JobRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.JobRequest.displayName = 'proto.sk8l.JobRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.PodRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sk8l.PodRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.PodRequest.displayName = 'proto.sk8l.PodRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.CronjobsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sk8l.CronjobsResponse.repeatedFields_, null);
};
goog.inherits(proto.sk8l.CronjobsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.CronjobsResponse.displayName = 'proto.sk8l.CronjobsResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.JobResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sk8l.JobResponse.repeatedFields_, null);
};
goog.inherits(proto.sk8l.JobResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.JobResponse.displayName = 'proto.sk8l.JobResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.CronjobYAMLResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sk8l.CronjobYAMLResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.CronjobYAMLResponse.displayName = 'proto.sk8l.CronjobYAMLResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.JobYAMLResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sk8l.JobYAMLResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.JobYAMLResponse.displayName = 'proto.sk8l.JobYAMLResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.PodYAMLResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sk8l.PodYAMLResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.PodYAMLResponse.displayName = 'proto.sk8l.PodYAMLResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.PodResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sk8l.PodResponse.repeatedFields_, null);
};
goog.inherits(proto.sk8l.PodResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.PodResponse.displayName = 'proto.sk8l.PodResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.ContainerCommands = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sk8l.ContainerCommands.repeatedFields_, null);
};
goog.inherits(proto.sk8l.ContainerCommands, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.ContainerCommands.displayName = 'proto.sk8l.ContainerCommands';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.ContainerResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sk8l.ContainerResponse.repeatedFields_, null);
};
goog.inherits(proto.sk8l.ContainerResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.ContainerResponse.displayName = 'proto.sk8l.ContainerResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.TerminationReason = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.sk8l.TerminationReason, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.TerminationReason.displayName = 'proto.sk8l.TerminationReason';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.TerminatedContainers = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sk8l.TerminatedContainers.repeatedFields_, null);
};
goog.inherits(proto.sk8l.TerminatedContainers, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.TerminatedContainers.displayName = 'proto.sk8l.TerminatedContainers';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.CronjobResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sk8l.CronjobResponse.repeatedFields_, null);
};
goog.inherits(proto.sk8l.CronjobResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.CronjobResponse.displayName = 'proto.sk8l.CronjobResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.sk8l.CronjobPodsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.sk8l.CronjobPodsResponse.repeatedFields_, null);
};
goog.inherits(proto.sk8l.CronjobPodsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.sk8l.CronjobPodsResponse.displayName = 'proto.sk8l.CronjobPodsResponse';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.CronjobsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.CronjobsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.CronjobsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.CronjobsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.CronjobsRequest}
 */
proto.sk8l.CronjobsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.CronjobsRequest;
  return proto.sk8l.CronjobsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.CronjobsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.CronjobsRequest}
 */
proto.sk8l.CronjobsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.CronjobsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.CronjobsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.CronjobsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.CronjobsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.CronjobRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.CronjobRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.CronjobRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.CronjobRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cronjobname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cronjobnamespace: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.CronjobRequest}
 */
proto.sk8l.CronjobRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.CronjobRequest;
  return proto.sk8l.CronjobRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.CronjobRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.CronjobRequest}
 */
proto.sk8l.CronjobRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCronjobname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCronjobnamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.CronjobRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.CronjobRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.CronjobRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.CronjobRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCronjobname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCronjobnamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string cronjobName = 1;
 * @return {string}
 */
proto.sk8l.CronjobRequest.prototype.getCronjobname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.CronjobRequest} returns this
 */
proto.sk8l.CronjobRequest.prototype.setCronjobname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cronjobNamespace = 2;
 * @return {string}
 */
proto.sk8l.CronjobRequest.prototype.getCronjobnamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.CronjobRequest} returns this
 */
proto.sk8l.CronjobRequest.prototype.setCronjobnamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.CronjobPodsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.CronjobPodsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.CronjobPodsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.CronjobPodsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    cronjobname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cronjobnamespace: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.CronjobPodsRequest}
 */
proto.sk8l.CronjobPodsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.CronjobPodsRequest;
  return proto.sk8l.CronjobPodsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.CronjobPodsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.CronjobPodsRequest}
 */
proto.sk8l.CronjobPodsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCronjobname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCronjobnamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.CronjobPodsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.CronjobPodsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.CronjobPodsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.CronjobPodsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCronjobname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCronjobnamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string cronjobName = 1;
 * @return {string}
 */
proto.sk8l.CronjobPodsRequest.prototype.getCronjobname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.CronjobPodsRequest} returns this
 */
proto.sk8l.CronjobPodsRequest.prototype.setCronjobname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string cronjobNamespace = 2;
 * @return {string}
 */
proto.sk8l.CronjobPodsRequest.prototype.getCronjobnamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.CronjobPodsRequest} returns this
 */
proto.sk8l.CronjobPodsRequest.prototype.setCronjobnamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.JobRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.JobRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.JobRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.JobRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    jobname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    jobnamespace: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.JobRequest}
 */
proto.sk8l.JobRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.JobRequest;
  return proto.sk8l.JobRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.JobRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.JobRequest}
 */
proto.sk8l.JobRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setJobnamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.JobRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.JobRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.JobRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.JobRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJobname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getJobnamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string jobName = 1;
 * @return {string}
 */
proto.sk8l.JobRequest.prototype.getJobname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.JobRequest} returns this
 */
proto.sk8l.JobRequest.prototype.setJobname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string jobNamespace = 2;
 * @return {string}
 */
proto.sk8l.JobRequest.prototype.getJobnamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.JobRequest} returns this
 */
proto.sk8l.JobRequest.prototype.setJobnamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.PodRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.PodRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.PodRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.PodRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    podname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    podnamespace: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.PodRequest}
 */
proto.sk8l.PodRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.PodRequest;
  return proto.sk8l.PodRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.PodRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.PodRequest}
 */
proto.sk8l.PodRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPodname(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPodnamespace(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.PodRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.PodRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.PodRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.PodRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPodname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPodnamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string podName = 1;
 * @return {string}
 */
proto.sk8l.PodRequest.prototype.getPodname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.PodRequest} returns this
 */
proto.sk8l.PodRequest.prototype.setPodname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string podNamespace = 2;
 * @return {string}
 */
proto.sk8l.PodRequest.prototype.getPodnamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.PodRequest} returns this
 */
proto.sk8l.PodRequest.prototype.setPodnamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sk8l.CronjobsResponse.repeatedFields_ = [5,4,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.CronjobsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.CronjobsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.CronjobsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.CronjobsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cronjobsList: jspb.Message.toObjectList(msg.getCronjobsList(),
    proto.sk8l.CronjobResponse.toObject, includeInstance),
    activejobsList: jspb.Message.toObjectList(msg.getActivejobsList(),
    proto.sk8l.JobResponse.toObject, includeInstance),
    jobspodsList: jspb.Message.toObjectList(msg.getJobspodsList(),
    proto.sk8l.PodResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.CronjobsResponse}
 */
proto.sk8l.CronjobsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.CronjobsResponse;
  return proto.sk8l.CronjobsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.CronjobsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.CronjobsResponse}
 */
proto.sk8l.CronjobsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 5:
      var value = new proto.sk8l.CronjobResponse;
      reader.readMessage(value,proto.sk8l.CronjobResponse.deserializeBinaryFromReader);
      msg.addCronjobs(value);
      break;
    case 4:
      var value = new proto.sk8l.JobResponse;
      reader.readMessage(value,proto.sk8l.JobResponse.deserializeBinaryFromReader);
      msg.addActivejobs(value);
      break;
    case 3:
      var value = new proto.sk8l.PodResponse;
      reader.readMessage(value,proto.sk8l.PodResponse.deserializeBinaryFromReader);
      msg.addJobspods(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.CronjobsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.CronjobsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.CronjobsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.CronjobsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCronjobsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.sk8l.CronjobResponse.serializeBinaryToWriter
    );
  }
  f = message.getActivejobsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.sk8l.JobResponse.serializeBinaryToWriter
    );
  }
  f = message.getJobspodsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.sk8l.PodResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated CronjobResponse cronjobs = 5;
 * @return {!Array<!proto.sk8l.CronjobResponse>}
 */
proto.sk8l.CronjobsResponse.prototype.getCronjobsList = function() {
  return /** @type{!Array<!proto.sk8l.CronjobResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sk8l.CronjobResponse, 5));
};


/**
 * @param {!Array<!proto.sk8l.CronjobResponse>} value
 * @return {!proto.sk8l.CronjobsResponse} returns this
*/
proto.sk8l.CronjobsResponse.prototype.setCronjobsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.sk8l.CronjobResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sk8l.CronjobResponse}
 */
proto.sk8l.CronjobsResponse.prototype.addCronjobs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.sk8l.CronjobResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.CronjobsResponse} returns this
 */
proto.sk8l.CronjobsResponse.prototype.clearCronjobsList = function() {
  return this.setCronjobsList([]);
};


/**
 * repeated JobResponse activeJobs = 4;
 * @return {!Array<!proto.sk8l.JobResponse>}
 */
proto.sk8l.CronjobsResponse.prototype.getActivejobsList = function() {
  return /** @type{!Array<!proto.sk8l.JobResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sk8l.JobResponse, 4));
};


/**
 * @param {!Array<!proto.sk8l.JobResponse>} value
 * @return {!proto.sk8l.CronjobsResponse} returns this
*/
proto.sk8l.CronjobsResponse.prototype.setActivejobsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.sk8l.JobResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sk8l.JobResponse}
 */
proto.sk8l.CronjobsResponse.prototype.addActivejobs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.sk8l.JobResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.CronjobsResponse} returns this
 */
proto.sk8l.CronjobsResponse.prototype.clearActivejobsList = function() {
  return this.setActivejobsList([]);
};


/**
 * repeated PodResponse jobsPods = 3;
 * @return {!Array<!proto.sk8l.PodResponse>}
 */
proto.sk8l.CronjobsResponse.prototype.getJobspodsList = function() {
  return /** @type{!Array<!proto.sk8l.PodResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sk8l.PodResponse, 3));
};


/**
 * @param {!Array<!proto.sk8l.PodResponse>} value
 * @return {!proto.sk8l.CronjobsResponse} returns this
*/
proto.sk8l.CronjobsResponse.prototype.setJobspodsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.sk8l.PodResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sk8l.PodResponse}
 */
proto.sk8l.CronjobsResponse.prototype.addJobspods = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.sk8l.PodResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.CronjobsResponse} returns this
 */
proto.sk8l.CronjobsResponse.prototype.clearJobspodsList = function() {
  return this.setJobspodsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sk8l.JobResponse.repeatedFields_ = [15,16];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.JobResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.JobResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.JobResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.JobResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ObjectMeta.toObject(includeInstance, f),
    spec: (f = msg.getSpec()) && k8s_io_api_batch_v1_generated_pb.JobSpec.toObject(includeInstance, f),
    jobstatus: (f = msg.getJobstatus()) && k8s_io_api_batch_v1_generated_pb.JobStatus.toObject(includeInstance, f),
    name: jspb.Message.getFieldWithDefault(msg, 4, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 5, ""),
    creationtimestamp: jspb.Message.getFieldWithDefault(msg, 6, ""),
    uuid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    generation: jspb.Message.getFieldWithDefault(msg, 8, 0),
    duration: jspb.Message.getFieldWithDefault(msg, 9, ""),
    durationins: jspb.Message.getFieldWithDefault(msg, 10, 0),
    status: (f = msg.getStatus()) && sk8l_custom_pb.JobStatus.toObject(includeInstance, f),
    succeeded: jspb.Message.getBooleanFieldWithDefault(msg, 12, false),
    failed: jspb.Message.getBooleanFieldWithDefault(msg, 13, false),
    failurecondition: (f = msg.getFailurecondition()) && k8s_io_api_batch_v1_generated_pb.JobCondition.toObject(includeInstance, f),
    podsList: jspb.Message.toObjectList(msg.getPodsList(),
    proto.sk8l.PodResponse.toObject, includeInstance),
    terminationreasonsList: jspb.Message.toObjectList(msg.getTerminationreasonsList(),
    proto.sk8l.TerminationReason.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.JobResponse}
 */
proto.sk8l.JobResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.JobResponse;
  return proto.sk8l.JobResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.JobResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.JobResponse}
 */
proto.sk8l.JobResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ObjectMeta;
      reader.readMessage(value,k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ObjectMeta.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new k8s_io_api_batch_v1_generated_pb.JobSpec;
      reader.readMessage(value,k8s_io_api_batch_v1_generated_pb.JobSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 3:
      var value = new k8s_io_api_batch_v1_generated_pb.JobStatus;
      reader.readMessage(value,k8s_io_api_batch_v1_generated_pb.JobStatus.deserializeBinaryFromReader);
      msg.setJobstatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreationtimestamp(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setUuid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setGeneration(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setDuration(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDurationins(value);
      break;
    case 11:
      var value = new sk8l_custom_pb.JobStatus;
      reader.readMessage(value,sk8l_custom_pb.JobStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 12:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSucceeded(value);
      break;
    case 13:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFailed(value);
      break;
    case 14:
      var value = new k8s_io_api_batch_v1_generated_pb.JobCondition;
      reader.readMessage(value,k8s_io_api_batch_v1_generated_pb.JobCondition.deserializeBinaryFromReader);
      msg.setFailurecondition(value);
      break;
    case 15:
      var value = new proto.sk8l.PodResponse;
      reader.readMessage(value,proto.sk8l.PodResponse.deserializeBinaryFromReader);
      msg.addPods(value);
      break;
    case 16:
      var value = new proto.sk8l.TerminationReason;
      reader.readMessage(value,proto.sk8l.TerminationReason.deserializeBinaryFromReader);
      msg.addTerminationreasons(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.JobResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.JobResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.JobResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.JobResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ObjectMeta.serializeBinaryToWriter
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      k8s_io_api_batch_v1_generated_pb.JobSpec.serializeBinaryToWriter
    );
  }
  f = message.getJobstatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      k8s_io_api_batch_v1_generated_pb.JobStatus.serializeBinaryToWriter
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCreationtimestamp();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getUuid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getGeneration();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getDuration();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getDurationins();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      sk8l_custom_pb.JobStatus.serializeBinaryToWriter
    );
  }
  f = message.getSucceeded();
  if (f) {
    writer.writeBool(
      12,
      f
    );
  }
  f = message.getFailed();
  if (f) {
    writer.writeBool(
      13,
      f
    );
  }
  f = message.getFailurecondition();
  if (f != null) {
    writer.writeMessage(
      14,
      f,
      k8s_io_api_batch_v1_generated_pb.JobCondition.serializeBinaryToWriter
    );
  }
  f = message.getPodsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      15,
      f,
      proto.sk8l.PodResponse.serializeBinaryToWriter
    );
  }
  f = message.getTerminationreasonsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      16,
      f,
      proto.sk8l.TerminationReason.serializeBinaryToWriter
    );
  }
};


/**
 * optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
 * @return {?proto.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta}
 */
proto.sk8l.JobResponse.prototype.getMetadata = function() {
  return /** @type{?proto.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta} */ (
    jspb.Message.getWrapperField(this, k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ObjectMeta, 1));
};


/**
 * @param {?proto.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta|undefined} value
 * @return {!proto.sk8l.JobResponse} returns this
*/
proto.sk8l.JobResponse.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sk8l.JobResponse} returns this
 */
proto.sk8l.JobResponse.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sk8l.JobResponse.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional k8s.io.api.batch.v1.JobSpec spec = 2;
 * @return {?proto.k8s.io.api.batch.v1.JobSpec}
 */
proto.sk8l.JobResponse.prototype.getSpec = function() {
  return /** @type{?proto.k8s.io.api.batch.v1.JobSpec} */ (
    jspb.Message.getWrapperField(this, k8s_io_api_batch_v1_generated_pb.JobSpec, 2));
};


/**
 * @param {?proto.k8s.io.api.batch.v1.JobSpec|undefined} value
 * @return {!proto.sk8l.JobResponse} returns this
*/
proto.sk8l.JobResponse.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sk8l.JobResponse} returns this
 */
proto.sk8l.JobResponse.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sk8l.JobResponse.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional k8s.io.api.batch.v1.JobStatus jobStatus = 3;
 * @return {?proto.k8s.io.api.batch.v1.JobStatus}
 */
proto.sk8l.JobResponse.prototype.getJobstatus = function() {
  return /** @type{?proto.k8s.io.api.batch.v1.JobStatus} */ (
    jspb.Message.getWrapperField(this, k8s_io_api_batch_v1_generated_pb.JobStatus, 3));
};


/**
 * @param {?proto.k8s.io.api.batch.v1.JobStatus|undefined} value
 * @return {!proto.sk8l.JobResponse} returns this
*/
proto.sk8l.JobResponse.prototype.setJobstatus = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sk8l.JobResponse} returns this
 */
proto.sk8l.JobResponse.prototype.clearJobstatus = function() {
  return this.setJobstatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sk8l.JobResponse.prototype.hasJobstatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.sk8l.JobResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.JobResponse} returns this
 */
proto.sk8l.JobResponse.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string namespace = 5;
 * @return {string}
 */
proto.sk8l.JobResponse.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.JobResponse} returns this
 */
proto.sk8l.JobResponse.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string creationTimestamp = 6;
 * @return {string}
 */
proto.sk8l.JobResponse.prototype.getCreationtimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.JobResponse} returns this
 */
proto.sk8l.JobResponse.prototype.setCreationtimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string Uuid = 7;
 * @return {string}
 */
proto.sk8l.JobResponse.prototype.getUuid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.JobResponse} returns this
 */
proto.sk8l.JobResponse.prototype.setUuid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional int64 generation = 8;
 * @return {number}
 */
proto.sk8l.JobResponse.prototype.getGeneration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.sk8l.JobResponse} returns this
 */
proto.sk8l.JobResponse.prototype.setGeneration = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional string duration = 9;
 * @return {string}
 */
proto.sk8l.JobResponse.prototype.getDuration = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.JobResponse} returns this
 */
proto.sk8l.JobResponse.prototype.setDuration = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int64 durationInS = 10;
 * @return {number}
 */
proto.sk8l.JobResponse.prototype.getDurationins = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.sk8l.JobResponse} returns this
 */
proto.sk8l.JobResponse.prototype.setDurationins = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional sk8l_custom.JobStatus status = 11;
 * @return {?proto.sk8l_custom.JobStatus}
 */
proto.sk8l.JobResponse.prototype.getStatus = function() {
  return /** @type{?proto.sk8l_custom.JobStatus} */ (
    jspb.Message.getWrapperField(this, sk8l_custom_pb.JobStatus, 11));
};


/**
 * @param {?proto.sk8l_custom.JobStatus|undefined} value
 * @return {!proto.sk8l.JobResponse} returns this
*/
proto.sk8l.JobResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sk8l.JobResponse} returns this
 */
proto.sk8l.JobResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sk8l.JobResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional bool succeeded = 12;
 * @return {boolean}
 */
proto.sk8l.JobResponse.prototype.getSucceeded = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 12, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sk8l.JobResponse} returns this
 */
proto.sk8l.JobResponse.prototype.setSucceeded = function(value) {
  return jspb.Message.setProto3BooleanField(this, 12, value);
};


/**
 * optional bool failed = 13;
 * @return {boolean}
 */
proto.sk8l.JobResponse.prototype.getFailed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 13, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sk8l.JobResponse} returns this
 */
proto.sk8l.JobResponse.prototype.setFailed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 13, value);
};


/**
 * optional k8s.io.api.batch.v1.JobCondition failureCondition = 14;
 * @return {?proto.k8s.io.api.batch.v1.JobCondition}
 */
proto.sk8l.JobResponse.prototype.getFailurecondition = function() {
  return /** @type{?proto.k8s.io.api.batch.v1.JobCondition} */ (
    jspb.Message.getWrapperField(this, k8s_io_api_batch_v1_generated_pb.JobCondition, 14));
};


/**
 * @param {?proto.k8s.io.api.batch.v1.JobCondition|undefined} value
 * @return {!proto.sk8l.JobResponse} returns this
*/
proto.sk8l.JobResponse.prototype.setFailurecondition = function(value) {
  return jspb.Message.setWrapperField(this, 14, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sk8l.JobResponse} returns this
 */
proto.sk8l.JobResponse.prototype.clearFailurecondition = function() {
  return this.setFailurecondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sk8l.JobResponse.prototype.hasFailurecondition = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * repeated PodResponse pods = 15;
 * @return {!Array<!proto.sk8l.PodResponse>}
 */
proto.sk8l.JobResponse.prototype.getPodsList = function() {
  return /** @type{!Array<!proto.sk8l.PodResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sk8l.PodResponse, 15));
};


/**
 * @param {!Array<!proto.sk8l.PodResponse>} value
 * @return {!proto.sk8l.JobResponse} returns this
*/
proto.sk8l.JobResponse.prototype.setPodsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 15, value);
};


/**
 * @param {!proto.sk8l.PodResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sk8l.PodResponse}
 */
proto.sk8l.JobResponse.prototype.addPods = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 15, opt_value, proto.sk8l.PodResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.JobResponse} returns this
 */
proto.sk8l.JobResponse.prototype.clearPodsList = function() {
  return this.setPodsList([]);
};


/**
 * repeated TerminationReason terminationReasons = 16;
 * @return {!Array<!proto.sk8l.TerminationReason>}
 */
proto.sk8l.JobResponse.prototype.getTerminationreasonsList = function() {
  return /** @type{!Array<!proto.sk8l.TerminationReason>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sk8l.TerminationReason, 16));
};


/**
 * @param {!Array<!proto.sk8l.TerminationReason>} value
 * @return {!proto.sk8l.JobResponse} returns this
*/
proto.sk8l.JobResponse.prototype.setTerminationreasonsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 16, value);
};


/**
 * @param {!proto.sk8l.TerminationReason=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sk8l.TerminationReason}
 */
proto.sk8l.JobResponse.prototype.addTerminationreasons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 16, opt_value, proto.sk8l.TerminationReason, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.JobResponse} returns this
 */
proto.sk8l.JobResponse.prototype.clearTerminationreasonsList = function() {
  return this.setTerminationreasonsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.CronjobYAMLResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.CronjobYAMLResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.CronjobYAMLResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.CronjobYAMLResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    cronjob: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.CronjobYAMLResponse}
 */
proto.sk8l.CronjobYAMLResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.CronjobYAMLResponse;
  return proto.sk8l.CronjobYAMLResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.CronjobYAMLResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.CronjobYAMLResponse}
 */
proto.sk8l.CronjobYAMLResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCronjob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.CronjobYAMLResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.CronjobYAMLResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.CronjobYAMLResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.CronjobYAMLResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCronjob();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string cronjob = 1;
 * @return {string}
 */
proto.sk8l.CronjobYAMLResponse.prototype.getCronjob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.CronjobYAMLResponse} returns this
 */
proto.sk8l.CronjobYAMLResponse.prototype.setCronjob = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.JobYAMLResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.JobYAMLResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.JobYAMLResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.JobYAMLResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    job: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.JobYAMLResponse}
 */
proto.sk8l.JobYAMLResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.JobYAMLResponse;
  return proto.sk8l.JobYAMLResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.JobYAMLResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.JobYAMLResponse}
 */
proto.sk8l.JobYAMLResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setJob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.JobYAMLResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.JobYAMLResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.JobYAMLResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.JobYAMLResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getJob();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string job = 1;
 * @return {string}
 */
proto.sk8l.JobYAMLResponse.prototype.getJob = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.JobYAMLResponse} returns this
 */
proto.sk8l.JobYAMLResponse.prototype.setJob = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.PodYAMLResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.PodYAMLResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.PodYAMLResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.PodYAMLResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    pod: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.PodYAMLResponse}
 */
proto.sk8l.PodYAMLResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.PodYAMLResponse;
  return proto.sk8l.PodYAMLResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.PodYAMLResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.PodYAMLResponse}
 */
proto.sk8l.PodYAMLResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPod(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.PodYAMLResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.PodYAMLResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.PodYAMLResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.PodYAMLResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPod();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string pod = 1;
 * @return {string}
 */
proto.sk8l.PodYAMLResponse.prototype.getPod = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.PodYAMLResponse} returns this
 */
proto.sk8l.PodYAMLResponse.prototype.setPod = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sk8l.PodResponse.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.PodResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.PodResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.PodResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.PodResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    metadata: (f = msg.getMetadata()) && k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ObjectMeta.toObject(includeInstance, f),
    spec: (f = msg.getSpec()) && k8s_io_api_core_v1_generated_pb.PodSpec.toObject(includeInstance, f),
    status: (f = msg.getStatus()) && k8s_io_api_core_v1_generated_pb.PodStatus.toObject(includeInstance, f),
    terminatedcontainers: (f = msg.getTerminatedcontainers()) && proto.sk8l.TerminatedContainers.toObject(includeInstance, f),
    failedcontainers: (f = msg.getFailedcontainers()) && proto.sk8l.TerminatedContainers.toObject(includeInstance, f),
    failed: jspb.Message.getBooleanFieldWithDefault(msg, 6, false),
    terminationreasonsList: jspb.Message.toObjectList(msg.getTerminationreasonsList(),
    proto.sk8l.TerminationReason.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.PodResponse}
 */
proto.sk8l.PodResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.PodResponse;
  return proto.sk8l.PodResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.PodResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.PodResponse}
 */
proto.sk8l.PodResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ObjectMeta;
      reader.readMessage(value,k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ObjectMeta.deserializeBinaryFromReader);
      msg.setMetadata(value);
      break;
    case 2:
      var value = new k8s_io_api_core_v1_generated_pb.PodSpec;
      reader.readMessage(value,k8s_io_api_core_v1_generated_pb.PodSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    case 3:
      var value = new k8s_io_api_core_v1_generated_pb.PodStatus;
      reader.readMessage(value,k8s_io_api_core_v1_generated_pb.PodStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 4:
      var value = new proto.sk8l.TerminatedContainers;
      reader.readMessage(value,proto.sk8l.TerminatedContainers.deserializeBinaryFromReader);
      msg.setTerminatedcontainers(value);
      break;
    case 5:
      var value = new proto.sk8l.TerminatedContainers;
      reader.readMessage(value,proto.sk8l.TerminatedContainers.deserializeBinaryFromReader);
      msg.setFailedcontainers(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setFailed(value);
      break;
    case 7:
      var value = new proto.sk8l.TerminationReason;
      reader.readMessage(value,proto.sk8l.TerminationReason.deserializeBinaryFromReader);
      msg.addTerminationreasons(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.PodResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.PodResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.PodResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.PodResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMetadata();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ObjectMeta.serializeBinaryToWriter
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      k8s_io_api_core_v1_generated_pb.PodSpec.serializeBinaryToWriter
    );
  }
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      k8s_io_api_core_v1_generated_pb.PodStatus.serializeBinaryToWriter
    );
  }
  f = message.getTerminatedcontainers();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sk8l.TerminatedContainers.serializeBinaryToWriter
    );
  }
  f = message.getFailedcontainers();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.sk8l.TerminatedContainers.serializeBinaryToWriter
    );
  }
  f = message.getFailed();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
  f = message.getTerminationreasonsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.sk8l.TerminationReason.serializeBinaryToWriter
    );
  }
};


/**
 * optional k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
 * @return {?proto.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta}
 */
proto.sk8l.PodResponse.prototype.getMetadata = function() {
  return /** @type{?proto.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta} */ (
    jspb.Message.getWrapperField(this, k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb.ObjectMeta, 1));
};


/**
 * @param {?proto.k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta|undefined} value
 * @return {!proto.sk8l.PodResponse} returns this
*/
proto.sk8l.PodResponse.prototype.setMetadata = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sk8l.PodResponse} returns this
 */
proto.sk8l.PodResponse.prototype.clearMetadata = function() {
  return this.setMetadata(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sk8l.PodResponse.prototype.hasMetadata = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional k8s.io.api.core.v1.PodSpec spec = 2;
 * @return {?proto.k8s.io.api.core.v1.PodSpec}
 */
proto.sk8l.PodResponse.prototype.getSpec = function() {
  return /** @type{?proto.k8s.io.api.core.v1.PodSpec} */ (
    jspb.Message.getWrapperField(this, k8s_io_api_core_v1_generated_pb.PodSpec, 2));
};


/**
 * @param {?proto.k8s.io.api.core.v1.PodSpec|undefined} value
 * @return {!proto.sk8l.PodResponse} returns this
*/
proto.sk8l.PodResponse.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sk8l.PodResponse} returns this
 */
proto.sk8l.PodResponse.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sk8l.PodResponse.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional k8s.io.api.core.v1.PodStatus status = 3;
 * @return {?proto.k8s.io.api.core.v1.PodStatus}
 */
proto.sk8l.PodResponse.prototype.getStatus = function() {
  return /** @type{?proto.k8s.io.api.core.v1.PodStatus} */ (
    jspb.Message.getWrapperField(this, k8s_io_api_core_v1_generated_pb.PodStatus, 3));
};


/**
 * @param {?proto.k8s.io.api.core.v1.PodStatus|undefined} value
 * @return {!proto.sk8l.PodResponse} returns this
*/
proto.sk8l.PodResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sk8l.PodResponse} returns this
 */
proto.sk8l.PodResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sk8l.PodResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional TerminatedContainers terminatedContainers = 4;
 * @return {?proto.sk8l.TerminatedContainers}
 */
proto.sk8l.PodResponse.prototype.getTerminatedcontainers = function() {
  return /** @type{?proto.sk8l.TerminatedContainers} */ (
    jspb.Message.getWrapperField(this, proto.sk8l.TerminatedContainers, 4));
};


/**
 * @param {?proto.sk8l.TerminatedContainers|undefined} value
 * @return {!proto.sk8l.PodResponse} returns this
*/
proto.sk8l.PodResponse.prototype.setTerminatedcontainers = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sk8l.PodResponse} returns this
 */
proto.sk8l.PodResponse.prototype.clearTerminatedcontainers = function() {
  return this.setTerminatedcontainers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sk8l.PodResponse.prototype.hasTerminatedcontainers = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional TerminatedContainers failedContainers = 5;
 * @return {?proto.sk8l.TerminatedContainers}
 */
proto.sk8l.PodResponse.prototype.getFailedcontainers = function() {
  return /** @type{?proto.sk8l.TerminatedContainers} */ (
    jspb.Message.getWrapperField(this, proto.sk8l.TerminatedContainers, 5));
};


/**
 * @param {?proto.sk8l.TerminatedContainers|undefined} value
 * @return {!proto.sk8l.PodResponse} returns this
*/
proto.sk8l.PodResponse.prototype.setFailedcontainers = function(value) {
  return jspb.Message.setWrapperField(this, 5, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sk8l.PodResponse} returns this
 */
proto.sk8l.PodResponse.prototype.clearFailedcontainers = function() {
  return this.setFailedcontainers(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sk8l.PodResponse.prototype.hasFailedcontainers = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional bool failed = 6;
 * @return {boolean}
 */
proto.sk8l.PodResponse.prototype.getFailed = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 6, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sk8l.PodResponse} returns this
 */
proto.sk8l.PodResponse.prototype.setFailed = function(value) {
  return jspb.Message.setProto3BooleanField(this, 6, value);
};


/**
 * repeated TerminationReason terminationReasons = 7;
 * @return {!Array<!proto.sk8l.TerminationReason>}
 */
proto.sk8l.PodResponse.prototype.getTerminationreasonsList = function() {
  return /** @type{!Array<!proto.sk8l.TerminationReason>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sk8l.TerminationReason, 7));
};


/**
 * @param {!Array<!proto.sk8l.TerminationReason>} value
 * @return {!proto.sk8l.PodResponse} returns this
*/
proto.sk8l.PodResponse.prototype.setTerminationreasonsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.sk8l.TerminationReason=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sk8l.TerminationReason}
 */
proto.sk8l.PodResponse.prototype.addTerminationreasons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.sk8l.TerminationReason, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.PodResponse} returns this
 */
proto.sk8l.PodResponse.prototype.clearTerminationreasonsList = function() {
  return this.setTerminationreasonsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sk8l.ContainerCommands.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.ContainerCommands.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.ContainerCommands.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.ContainerCommands} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.ContainerCommands.toObject = function(includeInstance, msg) {
  var f, obj = {
    commandsList: (f = jspb.Message.getRepeatedField(msg, 1)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.ContainerCommands}
 */
proto.sk8l.ContainerCommands.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.ContainerCommands;
  return proto.sk8l.ContainerCommands.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.ContainerCommands} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.ContainerCommands}
 */
proto.sk8l.ContainerCommands.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.addCommands(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.ContainerCommands.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.ContainerCommands.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.ContainerCommands} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.ContainerCommands.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCommandsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      1,
      f
    );
  }
};


/**
 * repeated string commands = 1;
 * @return {!Array<string>}
 */
proto.sk8l.ContainerCommands.prototype.getCommandsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 1));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.sk8l.ContainerCommands} returns this
 */
proto.sk8l.ContainerCommands.prototype.setCommandsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.sk8l.ContainerCommands} returns this
 */
proto.sk8l.ContainerCommands.prototype.addCommands = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.ContainerCommands} returns this
 */
proto.sk8l.ContainerCommands.prototype.clearCommandsList = function() {
  return this.setCommandsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sk8l.ContainerResponse.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.ContainerResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.ContainerResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.ContainerResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.ContainerResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    status: (f = msg.getStatus()) && k8s_io_api_core_v1_generated_pb.ContainerStatus.toObject(includeInstance, f),
    phase: jspb.Message.getFieldWithDefault(msg, 2, ""),
    conditionsList: jspb.Message.toObjectList(msg.getConditionsList(),
    k8s_io_api_core_v1_generated_pb.PodCondition.toObject, includeInstance),
    terminatedreason: (f = msg.getTerminatedreason()) && proto.sk8l.TerminationReason.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.ContainerResponse}
 */
proto.sk8l.ContainerResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.ContainerResponse;
  return proto.sk8l.ContainerResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.ContainerResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.ContainerResponse}
 */
proto.sk8l.ContainerResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new k8s_io_api_core_v1_generated_pb.ContainerStatus;
      reader.readMessage(value,k8s_io_api_core_v1_generated_pb.ContainerStatus.deserializeBinaryFromReader);
      msg.setStatus(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setPhase(value);
      break;
    case 3:
      var value = new k8s_io_api_core_v1_generated_pb.PodCondition;
      reader.readMessage(value,k8s_io_api_core_v1_generated_pb.PodCondition.deserializeBinaryFromReader);
      msg.addConditions(value);
      break;
    case 4:
      var value = new proto.sk8l.TerminationReason;
      reader.readMessage(value,proto.sk8l.TerminationReason.deserializeBinaryFromReader);
      msg.setTerminatedreason(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.ContainerResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.ContainerResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.ContainerResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.ContainerResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStatus();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      k8s_io_api_core_v1_generated_pb.ContainerStatus.serializeBinaryToWriter
    );
  }
  f = message.getPhase();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getConditionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      k8s_io_api_core_v1_generated_pb.PodCondition.serializeBinaryToWriter
    );
  }
  f = message.getTerminatedreason();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.sk8l.TerminationReason.serializeBinaryToWriter
    );
  }
};


/**
 * optional k8s.io.api.core.v1.ContainerStatus status = 1;
 * @return {?proto.k8s.io.api.core.v1.ContainerStatus}
 */
proto.sk8l.ContainerResponse.prototype.getStatus = function() {
  return /** @type{?proto.k8s.io.api.core.v1.ContainerStatus} */ (
    jspb.Message.getWrapperField(this, k8s_io_api_core_v1_generated_pb.ContainerStatus, 1));
};


/**
 * @param {?proto.k8s.io.api.core.v1.ContainerStatus|undefined} value
 * @return {!proto.sk8l.ContainerResponse} returns this
*/
proto.sk8l.ContainerResponse.prototype.setStatus = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sk8l.ContainerResponse} returns this
 */
proto.sk8l.ContainerResponse.prototype.clearStatus = function() {
  return this.setStatus(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sk8l.ContainerResponse.prototype.hasStatus = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string phase = 2;
 * @return {string}
 */
proto.sk8l.ContainerResponse.prototype.getPhase = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.ContainerResponse} returns this
 */
proto.sk8l.ContainerResponse.prototype.setPhase = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated k8s.io.api.core.v1.PodCondition conditions = 3;
 * @return {!Array<!proto.k8s.io.api.core.v1.PodCondition>}
 */
proto.sk8l.ContainerResponse.prototype.getConditionsList = function() {
  return /** @type{!Array<!proto.k8s.io.api.core.v1.PodCondition>} */ (
    jspb.Message.getRepeatedWrapperField(this, k8s_io_api_core_v1_generated_pb.PodCondition, 3));
};


/**
 * @param {!Array<!proto.k8s.io.api.core.v1.PodCondition>} value
 * @return {!proto.sk8l.ContainerResponse} returns this
*/
proto.sk8l.ContainerResponse.prototype.setConditionsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.k8s.io.api.core.v1.PodCondition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.k8s.io.api.core.v1.PodCondition}
 */
proto.sk8l.ContainerResponse.prototype.addConditions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.k8s.io.api.core.v1.PodCondition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.ContainerResponse} returns this
 */
proto.sk8l.ContainerResponse.prototype.clearConditionsList = function() {
  return this.setConditionsList([]);
};


/**
 * optional TerminationReason terminatedReason = 4;
 * @return {?proto.sk8l.TerminationReason}
 */
proto.sk8l.ContainerResponse.prototype.getTerminatedreason = function() {
  return /** @type{?proto.sk8l.TerminationReason} */ (
    jspb.Message.getWrapperField(this, proto.sk8l.TerminationReason, 4));
};


/**
 * @param {?proto.sk8l.TerminationReason|undefined} value
 * @return {!proto.sk8l.ContainerResponse} returns this
*/
proto.sk8l.ContainerResponse.prototype.setTerminatedreason = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sk8l.ContainerResponse} returns this
 */
proto.sk8l.ContainerResponse.prototype.clearTerminatedreason = function() {
  return this.setTerminatedreason(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sk8l.ContainerResponse.prototype.hasTerminatedreason = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.TerminationReason.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.TerminationReason.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.TerminationReason} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.TerminationReason.toObject = function(includeInstance, msg) {
  var f, obj = {
    terminationdetails: (f = msg.getTerminationdetails()) && k8s_io_api_core_v1_generated_pb.ContainerStateTerminated.toObject(includeInstance, f),
    containername: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.TerminationReason}
 */
proto.sk8l.TerminationReason.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.TerminationReason;
  return proto.sk8l.TerminationReason.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.TerminationReason} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.TerminationReason}
 */
proto.sk8l.TerminationReason.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new k8s_io_api_core_v1_generated_pb.ContainerStateTerminated;
      reader.readMessage(value,k8s_io_api_core_v1_generated_pb.ContainerStateTerminated.deserializeBinaryFromReader);
      msg.setTerminationdetails(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setContainername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.TerminationReason.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.TerminationReason.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.TerminationReason} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.TerminationReason.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTerminationdetails();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      k8s_io_api_core_v1_generated_pb.ContainerStateTerminated.serializeBinaryToWriter
    );
  }
  f = message.getContainername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional k8s.io.api.core.v1.ContainerStateTerminated terminationDetails = 1;
 * @return {?proto.k8s.io.api.core.v1.ContainerStateTerminated}
 */
proto.sk8l.TerminationReason.prototype.getTerminationdetails = function() {
  return /** @type{?proto.k8s.io.api.core.v1.ContainerStateTerminated} */ (
    jspb.Message.getWrapperField(this, k8s_io_api_core_v1_generated_pb.ContainerStateTerminated, 1));
};


/**
 * @param {?proto.k8s.io.api.core.v1.ContainerStateTerminated|undefined} value
 * @return {!proto.sk8l.TerminationReason} returns this
*/
proto.sk8l.TerminationReason.prototype.setTerminationdetails = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sk8l.TerminationReason} returns this
 */
proto.sk8l.TerminationReason.prototype.clearTerminationdetails = function() {
  return this.setTerminationdetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sk8l.TerminationReason.prototype.hasTerminationdetails = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string containerName = 2;
 * @return {string}
 */
proto.sk8l.TerminationReason.prototype.getContainername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.TerminationReason} returns this
 */
proto.sk8l.TerminationReason.prototype.setContainername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sk8l.TerminatedContainers.repeatedFields_ = [1,2,3,4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.TerminatedContainers.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.TerminatedContainers.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.TerminatedContainers} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.TerminatedContainers.toObject = function(includeInstance, msg) {
  var f, obj = {
    initcontainersList: jspb.Message.toObjectList(msg.getInitcontainersList(),
    proto.sk8l.ContainerResponse.toObject, includeInstance),
    containersList: jspb.Message.toObjectList(msg.getContainersList(),
    proto.sk8l.ContainerResponse.toObject, includeInstance),
    ephemeralcontainersList: jspb.Message.toObjectList(msg.getEphemeralcontainersList(),
    proto.sk8l.ContainerResponse.toObject, includeInstance),
    terminationreasonsList: jspb.Message.toObjectList(msg.getTerminationreasonsList(),
    proto.sk8l.TerminationReason.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.TerminatedContainers}
 */
proto.sk8l.TerminatedContainers.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.TerminatedContainers;
  return proto.sk8l.TerminatedContainers.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.TerminatedContainers} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.TerminatedContainers}
 */
proto.sk8l.TerminatedContainers.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sk8l.ContainerResponse;
      reader.readMessage(value,proto.sk8l.ContainerResponse.deserializeBinaryFromReader);
      msg.addInitcontainers(value);
      break;
    case 2:
      var value = new proto.sk8l.ContainerResponse;
      reader.readMessage(value,proto.sk8l.ContainerResponse.deserializeBinaryFromReader);
      msg.addContainers(value);
      break;
    case 3:
      var value = new proto.sk8l.ContainerResponse;
      reader.readMessage(value,proto.sk8l.ContainerResponse.deserializeBinaryFromReader);
      msg.addEphemeralcontainers(value);
      break;
    case 4:
      var value = new proto.sk8l.TerminationReason;
      reader.readMessage(value,proto.sk8l.TerminationReason.deserializeBinaryFromReader);
      msg.addTerminationreasons(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.TerminatedContainers.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.TerminatedContainers.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.TerminatedContainers} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.TerminatedContainers.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitcontainersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sk8l.ContainerResponse.serializeBinaryToWriter
    );
  }
  f = message.getContainersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.sk8l.ContainerResponse.serializeBinaryToWriter
    );
  }
  f = message.getEphemeralcontainersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.sk8l.ContainerResponse.serializeBinaryToWriter
    );
  }
  f = message.getTerminationreasonsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.sk8l.TerminationReason.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ContainerResponse initContainers = 1;
 * @return {!Array<!proto.sk8l.ContainerResponse>}
 */
proto.sk8l.TerminatedContainers.prototype.getInitcontainersList = function() {
  return /** @type{!Array<!proto.sk8l.ContainerResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sk8l.ContainerResponse, 1));
};


/**
 * @param {!Array<!proto.sk8l.ContainerResponse>} value
 * @return {!proto.sk8l.TerminatedContainers} returns this
*/
proto.sk8l.TerminatedContainers.prototype.setInitcontainersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sk8l.ContainerResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sk8l.ContainerResponse}
 */
proto.sk8l.TerminatedContainers.prototype.addInitcontainers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sk8l.ContainerResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.TerminatedContainers} returns this
 */
proto.sk8l.TerminatedContainers.prototype.clearInitcontainersList = function() {
  return this.setInitcontainersList([]);
};


/**
 * repeated ContainerResponse containers = 2;
 * @return {!Array<!proto.sk8l.ContainerResponse>}
 */
proto.sk8l.TerminatedContainers.prototype.getContainersList = function() {
  return /** @type{!Array<!proto.sk8l.ContainerResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sk8l.ContainerResponse, 2));
};


/**
 * @param {!Array<!proto.sk8l.ContainerResponse>} value
 * @return {!proto.sk8l.TerminatedContainers} returns this
*/
proto.sk8l.TerminatedContainers.prototype.setContainersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.sk8l.ContainerResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sk8l.ContainerResponse}
 */
proto.sk8l.TerminatedContainers.prototype.addContainers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.sk8l.ContainerResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.TerminatedContainers} returns this
 */
proto.sk8l.TerminatedContainers.prototype.clearContainersList = function() {
  return this.setContainersList([]);
};


/**
 * repeated ContainerResponse ephemeralContainers = 3;
 * @return {!Array<!proto.sk8l.ContainerResponse>}
 */
proto.sk8l.TerminatedContainers.prototype.getEphemeralcontainersList = function() {
  return /** @type{!Array<!proto.sk8l.ContainerResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sk8l.ContainerResponse, 3));
};


/**
 * @param {!Array<!proto.sk8l.ContainerResponse>} value
 * @return {!proto.sk8l.TerminatedContainers} returns this
*/
proto.sk8l.TerminatedContainers.prototype.setEphemeralcontainersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.sk8l.ContainerResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sk8l.ContainerResponse}
 */
proto.sk8l.TerminatedContainers.prototype.addEphemeralcontainers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.sk8l.ContainerResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.TerminatedContainers} returns this
 */
proto.sk8l.TerminatedContainers.prototype.clearEphemeralcontainersList = function() {
  return this.setEphemeralcontainersList([]);
};


/**
 * repeated TerminationReason terminationReasons = 4;
 * @return {!Array<!proto.sk8l.TerminationReason>}
 */
proto.sk8l.TerminatedContainers.prototype.getTerminationreasonsList = function() {
  return /** @type{!Array<!proto.sk8l.TerminationReason>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sk8l.TerminationReason, 4));
};


/**
 * @param {!Array<!proto.sk8l.TerminationReason>} value
 * @return {!proto.sk8l.TerminatedContainers} returns this
*/
proto.sk8l.TerminatedContainers.prototype.setTerminationreasonsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.sk8l.TerminationReason=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sk8l.TerminationReason}
 */
proto.sk8l.TerminatedContainers.prototype.addTerminationreasons = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.sk8l.TerminationReason, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.TerminatedContainers} returns this
 */
proto.sk8l.TerminatedContainers.prototype.clearTerminationreasonsList = function() {
  return this.setTerminationreasonsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sk8l.CronjobResponse.repeatedFields_ = [11,12,13,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.CronjobResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.CronjobResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.CronjobResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.CronjobResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    namespace: jspb.Message.getFieldWithDefault(msg, 2, ""),
    uid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    containercommandsMap: (f = msg.getContainercommandsMap()) ? f.toObject(includeInstance, proto.sk8l.ContainerCommands.toObject) : [],
    creationtimestamp: jspb.Message.getFieldWithDefault(msg, 5, ""),
    definition: jspb.Message.getFieldWithDefault(msg, 6, ""),
    lastsuccessfultime: jspb.Message.getFieldWithDefault(msg, 7, ""),
    lastscheduletime: jspb.Message.getFieldWithDefault(msg, 8, ""),
    active: jspb.Message.getBooleanFieldWithDefault(msg, 10, false),
    jobsList: jspb.Message.toObjectList(msg.getJobsList(),
    proto.sk8l.JobResponse.toObject, includeInstance),
    runningjobsList: jspb.Message.toObjectList(msg.getRunningjobsList(),
    proto.sk8l.JobResponse.toObject, includeInstance),
    runningjobspodsList: jspb.Message.toObjectList(msg.getRunningjobspodsList(),
    proto.sk8l.PodResponse.toObject, includeInstance),
    jobspodsList: jspb.Message.toObjectList(msg.getJobspodsList(),
    proto.sk8l.PodResponse.toObject, includeInstance),
    lastduration: jspb.Message.getFieldWithDefault(msg, 15, 0),
    currentduration: jspb.Message.getFieldWithDefault(msg, 16, 0),
    spec: (f = msg.getSpec()) && k8s_io_api_batch_v1_generated_pb.CronJobSpec.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.CronjobResponse}
 */
proto.sk8l.CronjobResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.CronjobResponse;
  return proto.sk8l.CronjobResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.CronjobResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.CronjobResponse}
 */
proto.sk8l.CronjobResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setNamespace(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUid(value);
      break;
    case 4:
      var value = msg.getContainercommandsMap();
      reader.readMessage(value, function(message, reader) {
        jspb.Map.deserializeBinary(message, reader, jspb.BinaryReader.prototype.readString, jspb.BinaryReader.prototype.readMessage, proto.sk8l.ContainerCommands.deserializeBinaryFromReader, "", new proto.sk8l.ContainerCommands());
         });
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreationtimestamp(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setDefinition(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastsuccessfultime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastscheduletime(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setActive(value);
      break;
    case 11:
      var value = new proto.sk8l.JobResponse;
      reader.readMessage(value,proto.sk8l.JobResponse.deserializeBinaryFromReader);
      msg.addJobs(value);
      break;
    case 12:
      var value = new proto.sk8l.JobResponse;
      reader.readMessage(value,proto.sk8l.JobResponse.deserializeBinaryFromReader);
      msg.addRunningjobs(value);
      break;
    case 13:
      var value = new proto.sk8l.PodResponse;
      reader.readMessage(value,proto.sk8l.PodResponse.deserializeBinaryFromReader);
      msg.addRunningjobspods(value);
      break;
    case 14:
      var value = new proto.sk8l.PodResponse;
      reader.readMessage(value,proto.sk8l.PodResponse.deserializeBinaryFromReader);
      msg.addJobspods(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastduration(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCurrentduration(value);
      break;
    case 17:
      var value = new k8s_io_api_batch_v1_generated_pb.CronJobSpec;
      reader.readMessage(value,k8s_io_api_batch_v1_generated_pb.CronJobSpec.deserializeBinaryFromReader);
      msg.setSpec(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.CronjobResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.CronjobResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.CronjobResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.CronjobResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getNamespace();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getContainercommandsMap(true);
  if (f && f.getLength() > 0) {
    f.serializeBinary(4, writer, jspb.BinaryWriter.prototype.writeString, jspb.BinaryWriter.prototype.writeMessage, proto.sk8l.ContainerCommands.serializeBinaryToWriter);
  }
  f = message.getCreationtimestamp();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getDefinition();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getLastsuccessfultime();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getLastscheduletime();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getActive();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getJobsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      11,
      f,
      proto.sk8l.JobResponse.serializeBinaryToWriter
    );
  }
  f = message.getRunningjobsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      12,
      f,
      proto.sk8l.JobResponse.serializeBinaryToWriter
    );
  }
  f = message.getRunningjobspodsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      13,
      f,
      proto.sk8l.PodResponse.serializeBinaryToWriter
    );
  }
  f = message.getJobspodsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.sk8l.PodResponse.serializeBinaryToWriter
    );
  }
  f = message.getLastduration();
  if (f !== 0) {
    writer.writeInt64(
      15,
      f
    );
  }
  f = message.getCurrentduration();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getSpec();
  if (f != null) {
    writer.writeMessage(
      17,
      f,
      k8s_io_api_batch_v1_generated_pb.CronJobSpec.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.sk8l.CronjobResponse.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.CronjobResponse} returns this
 */
proto.sk8l.CronjobResponse.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string namespace = 2;
 * @return {string}
 */
proto.sk8l.CronjobResponse.prototype.getNamespace = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.CronjobResponse} returns this
 */
proto.sk8l.CronjobResponse.prototype.setNamespace = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string uid = 3;
 * @return {string}
 */
proto.sk8l.CronjobResponse.prototype.getUid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.CronjobResponse} returns this
 */
proto.sk8l.CronjobResponse.prototype.setUid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * map<string, ContainerCommands> containerCommands = 4;
 * @param {boolean=} opt_noLazyCreate Do not create the map if
 * empty, instead returning `undefined`
 * @return {!jspb.Map<string,!proto.sk8l.ContainerCommands>}
 */
proto.sk8l.CronjobResponse.prototype.getContainercommandsMap = function(opt_noLazyCreate) {
  return /** @type {!jspb.Map<string,!proto.sk8l.ContainerCommands>} */ (
      jspb.Message.getMapField(this, 4, opt_noLazyCreate,
      proto.sk8l.ContainerCommands));
};


/**
 * Clears values from the map. The map will be non-null.
 * @return {!proto.sk8l.CronjobResponse} returns this
 */
proto.sk8l.CronjobResponse.prototype.clearContainercommandsMap = function() {
  this.getContainercommandsMap().clear();
  return this;
};


/**
 * optional string creationTimestamp = 5;
 * @return {string}
 */
proto.sk8l.CronjobResponse.prototype.getCreationtimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.CronjobResponse} returns this
 */
proto.sk8l.CronjobResponse.prototype.setCreationtimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string definition = 6;
 * @return {string}
 */
proto.sk8l.CronjobResponse.prototype.getDefinition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.CronjobResponse} returns this
 */
proto.sk8l.CronjobResponse.prototype.setDefinition = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string lastSuccessfulTime = 7;
 * @return {string}
 */
proto.sk8l.CronjobResponse.prototype.getLastsuccessfultime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.CronjobResponse} returns this
 */
proto.sk8l.CronjobResponse.prototype.setLastsuccessfultime = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string lastScheduleTime = 8;
 * @return {string}
 */
proto.sk8l.CronjobResponse.prototype.getLastscheduletime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.sk8l.CronjobResponse} returns this
 */
proto.sk8l.CronjobResponse.prototype.setLastscheduletime = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional bool active = 10;
 * @return {boolean}
 */
proto.sk8l.CronjobResponse.prototype.getActive = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 10, false));
};


/**
 * @param {boolean} value
 * @return {!proto.sk8l.CronjobResponse} returns this
 */
proto.sk8l.CronjobResponse.prototype.setActive = function(value) {
  return jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * repeated JobResponse jobs = 11;
 * @return {!Array<!proto.sk8l.JobResponse>}
 */
proto.sk8l.CronjobResponse.prototype.getJobsList = function() {
  return /** @type{!Array<!proto.sk8l.JobResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sk8l.JobResponse, 11));
};


/**
 * @param {!Array<!proto.sk8l.JobResponse>} value
 * @return {!proto.sk8l.CronjobResponse} returns this
*/
proto.sk8l.CronjobResponse.prototype.setJobsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 11, value);
};


/**
 * @param {!proto.sk8l.JobResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sk8l.JobResponse}
 */
proto.sk8l.CronjobResponse.prototype.addJobs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 11, opt_value, proto.sk8l.JobResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.CronjobResponse} returns this
 */
proto.sk8l.CronjobResponse.prototype.clearJobsList = function() {
  return this.setJobsList([]);
};


/**
 * repeated JobResponse runningJobs = 12;
 * @return {!Array<!proto.sk8l.JobResponse>}
 */
proto.sk8l.CronjobResponse.prototype.getRunningjobsList = function() {
  return /** @type{!Array<!proto.sk8l.JobResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sk8l.JobResponse, 12));
};


/**
 * @param {!Array<!proto.sk8l.JobResponse>} value
 * @return {!proto.sk8l.CronjobResponse} returns this
*/
proto.sk8l.CronjobResponse.prototype.setRunningjobsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 12, value);
};


/**
 * @param {!proto.sk8l.JobResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sk8l.JobResponse}
 */
proto.sk8l.CronjobResponse.prototype.addRunningjobs = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 12, opt_value, proto.sk8l.JobResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.CronjobResponse} returns this
 */
proto.sk8l.CronjobResponse.prototype.clearRunningjobsList = function() {
  return this.setRunningjobsList([]);
};


/**
 * repeated PodResponse runningJobsPods = 13;
 * @return {!Array<!proto.sk8l.PodResponse>}
 */
proto.sk8l.CronjobResponse.prototype.getRunningjobspodsList = function() {
  return /** @type{!Array<!proto.sk8l.PodResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sk8l.PodResponse, 13));
};


/**
 * @param {!Array<!proto.sk8l.PodResponse>} value
 * @return {!proto.sk8l.CronjobResponse} returns this
*/
proto.sk8l.CronjobResponse.prototype.setRunningjobspodsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 13, value);
};


/**
 * @param {!proto.sk8l.PodResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sk8l.PodResponse}
 */
proto.sk8l.CronjobResponse.prototype.addRunningjobspods = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 13, opt_value, proto.sk8l.PodResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.CronjobResponse} returns this
 */
proto.sk8l.CronjobResponse.prototype.clearRunningjobspodsList = function() {
  return this.setRunningjobspodsList([]);
};


/**
 * repeated PodResponse jobsPods = 14;
 * @return {!Array<!proto.sk8l.PodResponse>}
 */
proto.sk8l.CronjobResponse.prototype.getJobspodsList = function() {
  return /** @type{!Array<!proto.sk8l.PodResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sk8l.PodResponse, 14));
};


/**
 * @param {!Array<!proto.sk8l.PodResponse>} value
 * @return {!proto.sk8l.CronjobResponse} returns this
*/
proto.sk8l.CronjobResponse.prototype.setJobspodsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.sk8l.PodResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sk8l.PodResponse}
 */
proto.sk8l.CronjobResponse.prototype.addJobspods = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.sk8l.PodResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.CronjobResponse} returns this
 */
proto.sk8l.CronjobResponse.prototype.clearJobspodsList = function() {
  return this.setJobspodsList([]);
};


/**
 * optional int64 lastDuration = 15;
 * @return {number}
 */
proto.sk8l.CronjobResponse.prototype.getLastduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.sk8l.CronjobResponse} returns this
 */
proto.sk8l.CronjobResponse.prototype.setLastduration = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int64 currentDuration = 16;
 * @return {number}
 */
proto.sk8l.CronjobResponse.prototype.getCurrentduration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.sk8l.CronjobResponse} returns this
 */
proto.sk8l.CronjobResponse.prototype.setCurrentduration = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional k8s.io.api.batch.v1.CronJobSpec spec = 17;
 * @return {?proto.k8s.io.api.batch.v1.CronJobSpec}
 */
proto.sk8l.CronjobResponse.prototype.getSpec = function() {
  return /** @type{?proto.k8s.io.api.batch.v1.CronJobSpec} */ (
    jspb.Message.getWrapperField(this, k8s_io_api_batch_v1_generated_pb.CronJobSpec, 17));
};


/**
 * @param {?proto.k8s.io.api.batch.v1.CronJobSpec|undefined} value
 * @return {!proto.sk8l.CronjobResponse} returns this
*/
proto.sk8l.CronjobResponse.prototype.setSpec = function(value) {
  return jspb.Message.setWrapperField(this, 17, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sk8l.CronjobResponse} returns this
 */
proto.sk8l.CronjobResponse.prototype.clearSpec = function() {
  return this.setSpec(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sk8l.CronjobResponse.prototype.hasSpec = function() {
  return jspb.Message.getField(this, 17) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.sk8l.CronjobPodsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.sk8l.CronjobPodsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.sk8l.CronjobPodsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.sk8l.CronjobPodsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.CronjobPodsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    podsList: jspb.Message.toObjectList(msg.getPodsList(),
    proto.sk8l.PodResponse.toObject, includeInstance),
    cronjob: (f = msg.getCronjob()) && proto.sk8l.CronjobResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.sk8l.CronjobPodsResponse}
 */
proto.sk8l.CronjobPodsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.sk8l.CronjobPodsResponse;
  return proto.sk8l.CronjobPodsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.sk8l.CronjobPodsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.sk8l.CronjobPodsResponse}
 */
proto.sk8l.CronjobPodsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.sk8l.PodResponse;
      reader.readMessage(value,proto.sk8l.PodResponse.deserializeBinaryFromReader);
      msg.addPods(value);
      break;
    case 2:
      var value = new proto.sk8l.CronjobResponse;
      reader.readMessage(value,proto.sk8l.CronjobResponse.deserializeBinaryFromReader);
      msg.setCronjob(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.sk8l.CronjobPodsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.sk8l.CronjobPodsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.sk8l.CronjobPodsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.sk8l.CronjobPodsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPodsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.sk8l.PodResponse.serializeBinaryToWriter
    );
  }
  f = message.getCronjob();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.sk8l.CronjobResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PodResponse pods = 1;
 * @return {!Array<!proto.sk8l.PodResponse>}
 */
proto.sk8l.CronjobPodsResponse.prototype.getPodsList = function() {
  return /** @type{!Array<!proto.sk8l.PodResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.sk8l.PodResponse, 1));
};


/**
 * @param {!Array<!proto.sk8l.PodResponse>} value
 * @return {!proto.sk8l.CronjobPodsResponse} returns this
*/
proto.sk8l.CronjobPodsResponse.prototype.setPodsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.sk8l.PodResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.sk8l.PodResponse}
 */
proto.sk8l.CronjobPodsResponse.prototype.addPods = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.sk8l.PodResponse, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.sk8l.CronjobPodsResponse} returns this
 */
proto.sk8l.CronjobPodsResponse.prototype.clearPodsList = function() {
  return this.setPodsList([]);
};


/**
 * optional CronjobResponse cronjob = 2;
 * @return {?proto.sk8l.CronjobResponse}
 */
proto.sk8l.CronjobPodsResponse.prototype.getCronjob = function() {
  return /** @type{?proto.sk8l.CronjobResponse} */ (
    jspb.Message.getWrapperField(this, proto.sk8l.CronjobResponse, 2));
};


/**
 * @param {?proto.sk8l.CronjobResponse|undefined} value
 * @return {!proto.sk8l.CronjobPodsResponse} returns this
*/
proto.sk8l.CronjobPodsResponse.prototype.setCronjob = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.sk8l.CronjobPodsResponse} returns this
 */
proto.sk8l.CronjobPodsResponse.prototype.clearCronjob = function() {
  return this.setCronjob(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.sk8l.CronjobPodsResponse.prototype.hasCronjob = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.sk8l);
