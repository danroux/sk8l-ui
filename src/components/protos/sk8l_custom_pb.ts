// @generated by protoc-gen-es v2.2.5 with parameter "target=ts,import_extension=.ts"
// @generated from file sk8l_custom.proto (package sk8l_custom, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Time } from "./k8s.io/apimachinery/pkg/apis/meta/v1/generated_pb.ts";
import { file_k8s_io_apimachinery_pkg_apis_meta_v1_generated } from "./k8s.io/apimachinery/pkg/apis/meta/v1/generated_pb.ts";
import type { JobCondition, UncountedTerminatedPods } from "./k8s.io/api/batch/v1/generated_pb.ts";
import { file_k8s_io_api_batch_v1_generated } from "./k8s.io/api/batch/v1/generated_pb.ts";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file sk8l_custom.proto.
 */
export const file_sk8l_custom: GenFile = /*@__PURE__*/
  fileDesc("ChFzazhsX2N1c3RvbS5wcm90bxILc2s4bF9jdXN0b20iygUKCUpvYlN0YXR1cxI1Cgpjb25kaXRpb25zGAEgAygLMiEuazhzLmlvLmFwaS5iYXRjaC52MS5Kb2JDb25kaXRpb24SQgoJc3RhcnRUaW1lGAIgASgLMiouazhzLmlvLmFwaW1hY2hpbmVyeS5wa2cuYXBpcy5tZXRhLnYxLlRpbWVIAIgBARJHCg5jb21wbGV0aW9uVGltZRgDIAEoCzIqLms4cy5pby5hcGltYWNoaW5lcnkucGtnLmFwaXMubWV0YS52MS5UaW1lSAGIAQESEwoGYWN0aXZlGAQgASgFSAKIAQESFgoJc3VjY2VlZGVkGAUgASgFSAOIAQESEwoGZmFpbGVkGAYgASgFSASIAQESGAoLdGVybWluYXRpbmcYCyABKAVIBYgBARIdChBjb21wbGV0ZWRJbmRleGVzGAcgASgJSAaIAQESGgoNZmFpbGVkSW5kZXhlcxgKIAEoCUgHiAEBElIKF3VuY291bnRlZFRlcm1pbmF0ZWRQb2RzGAggASgLMiwuazhzLmlvLmFwaS5iYXRjaC52MS5VbmNvdW50ZWRUZXJtaW5hdGVkUG9kc0gIiAEBEhIKBXJlYWR5GAkgASgFSAmIAQESJgoMc3RhcnRUaW1lSW5TGPAGIAEoA1IPc3RhcnRfdGltZV9pbl9zEjAKEWNvbXBsZXRpb25UaW1lSW5TGPEGIAEoA1IUY29tcGxldGlvbl90aW1lX2luX3NCDAoKX3N0YXJ0VGltZUIRCg9fY29tcGxldGlvblRpbWVCCQoHX2FjdGl2ZUIMCgpfc3VjY2VlZGVkQgkKB19mYWlsZWRCDgoMX3Rlcm1pbmF0aW5nQhMKEV9jb21wbGV0ZWRJbmRleGVzQhAKDl9mYWlsZWRJbmRleGVzQhoKGF91bmNvdW50ZWRUZXJtaW5hdGVkUG9kc0IICgZfcmVhZHliBnByb3RvMw", [file_k8s_io_apimachinery_pkg_apis_meta_v1_generated, file_k8s_io_api_batch_v1_generated]);

/**
 * JobStatus represents the current state of a Job.
 *
 * @generated from message sk8l_custom.JobStatus
 */
export type JobStatus = Message<"sk8l_custom.JobStatus"> & {
  /**
   * The latest available observations of an object's current state. When a Job
   * fails, one of the conditions will have type "Failed" and status true. When
   * a Job is suspended, one of the conditions will have type "Suspended" and
   * status true; when the Job is resumed, the status of this condition will
   * become false. When a Job is completed, one of the conditions will have
   * type "Complete" and status true.
   * More info: https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/
   * +optional
   * +patchMergeKey=type
   * +patchStrategy=merge
   * +listType=atomic
   *
   * @generated from field: repeated k8s.io.api.batch.v1.JobCondition conditions = 1;
   */
  conditions: JobCondition[];

  /**
   * Represents time when the job controller started processing a job. When a
   * Job is created in the suspended state, this field is not set until the
   * first time it is resumed. This field is reset every time a Job is resumed
   * from suspension. It is represented in RFC3339 form and is in UTC.
   * +optional
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Time startTime = 2;
   */
  startTime?: Time;

  /**
   * Represents time when the job was completed. It is not guaranteed to
   * be set in happens-before order across separate operations.
   * It is represented in RFC3339 form and is in UTC.
   * The completion time is only set when the job finishes successfully.
   * +optional
   *
   * @generated from field: optional k8s.io.apimachinery.pkg.apis.meta.v1.Time completionTime = 3;
   */
  completionTime?: Time;

  /**
   * The number of pending and running pods.
   * +optional
   *
   * @generated from field: optional int32 active = 4;
   */
  active?: number;

  /**
   * The number of pods which reached phase Succeeded.
   * +optional
   *
   * @generated from field: optional int32 succeeded = 5;
   */
  succeeded?: number;

  /**
   * The number of pods which reached phase Failed.
   * +optional
   *
   * @generated from field: optional int32 failed = 6;
   */
  failed?: number;

  /**
   * The number of pods which are terminating (in phase Pending or Running
   * and have a deletionTimestamp).
   *
   * This field is alpha-level. The job controller populates the field when
   * the feature gate JobPodReplacementPolicy is enabled (disabled by default).
   * +optional
   *
   * @generated from field: optional int32 terminating = 11;
   */
  terminating?: number;

  /**
   * completedIndexes holds the completed indexes when .spec.completionMode =
   * "Indexed" in a text format. The indexes are represented as decimal integers
   * separated by commas. The numbers are listed in increasing order. Three or
   * more consecutive numbers are compressed and represented by the first and
   * last element of the series, separated by a hyphen.
   * For example, if the completed indexes are 1, 3, 4, 5 and 7, they are
   * represented as "1,3-5,7".
   * +optional
   *
   * @generated from field: optional string completedIndexes = 7;
   */
  completedIndexes?: string;

  /**
   * FailedIndexes holds the failed indexes when backoffLimitPerIndex=true.
   * The indexes are represented in the text format analogous as for the
   * `completedIndexes` field, ie. they are kept as decimal integers
   * separated by commas. The numbers are listed in increasing order. Three or
   * more consecutive numbers are compressed and represented by the first and
   * last element of the series, separated by a hyphen.
   * For example, if the failed indexes are 1, 3, 4, 5 and 7, they are
   * represented as "1,3-5,7".
   * This field is alpha-level. It can be used when the `JobBackoffLimitPerIndex`
   * feature gate is enabled (disabled by default).
   * +optional
   *
   * @generated from field: optional string failedIndexes = 10;
   */
  failedIndexes?: string;

  /**
   * uncountedTerminatedPods holds the UIDs of Pods that have terminated but
   * the job controller hasn't yet accounted for in the status counters.
   *
   * The job controller creates pods with a finalizer. When a pod terminates
   * (succeeded or failed), the controller does three steps to account for it
   * in the job status:
   *
   * 1. Add the pod UID to the arrays in this field.
   * 2. Remove the pod finalizer.
   * 3. Remove the pod UID from the arrays while increasing the corresponding
   *     counter.
   *
   * Old jobs might not be tracked using this field, in which case the field
   * remains null.
   * +optional
   *
   * @generated from field: optional k8s.io.api.batch.v1.UncountedTerminatedPods uncountedTerminatedPods = 8;
   */
  uncountedTerminatedPods?: UncountedTerminatedPods;

  /**
   * The number of pods which have a Ready condition.
   *
   * This field is beta-level. The job controller populates the field when
   * the feature gate JobReadyPods is enabled (enabled by default).
   * +optional
   *
   * @generated from field: optional int32 ready = 9;
   */
  ready?: number;

  /**
   * ////// sk8l custom
   *
   * @generated from field: int64 startTimeInS = 880 [json_name = "start_time_in_s"];
   */
  startTimeInS: bigint;

  /**
   * @generated from field: int64 completionTimeInS = 881 [json_name = "completion_time_in_s"];
   */
  completionTimeInS: bigint;
};

/**
 * Describes the message sk8l_custom.JobStatus.
 * Use `create(JobStatusSchema)` to create a new message.
 */
export const JobStatusSchema: GenMessage<JobStatus> = /*@__PURE__*/
  messageDesc(file_sk8l_custom, 0);

