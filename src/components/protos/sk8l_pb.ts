// Copyright 2023 DR
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// @generated by protoc-gen-es v1.9.0 with parameter "target=ts,import_extension=.ts"
// @generated from file sk8l.proto (package sk8l, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { ObjectMeta, Time } from "./k8s.io/apimachinery/pkg/apis/meta/v1/generated_pb.ts";
import { CronJobSpec, Job, JobCondition, JobSpec, JobStatus } from "./k8s.io/api/batch/v1/generated_pb.ts";
import { JobStatus as JobStatus$1 } from "./sk8l_custom_pb.ts";
import { ContainerStateTerminated, ContainerStatus, PodCondition, PodSpec, PodStatus } from "./k8s.io/api/core/v1/generated_pb.ts";

/**
 * @generated from message sk8l.CronjobsRequest
 */
export class CronjobsRequest extends Message<CronjobsRequest> {
  constructor(data?: PartialMessage<CronjobsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.CronjobsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CronjobsRequest {
    return new CronjobsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CronjobsRequest {
    return new CronjobsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CronjobsRequest {
    return new CronjobsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CronjobsRequest | PlainMessage<CronjobsRequest> | undefined, b: CronjobsRequest | PlainMessage<CronjobsRequest> | undefined): boolean {
    return proto3.util.equals(CronjobsRequest, a, b);
  }
}

/**
 * @generated from message sk8l.CronjobRequest
 */
export class CronjobRequest extends Message<CronjobRequest> {
  /**
   * @generated from field: string cronjobName = 1;
   */
  cronjobName = "";

  /**
   * @generated from field: string cronjobNamespace = 2;
   */
  cronjobNamespace = "";

  constructor(data?: PartialMessage<CronjobRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.CronjobRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cronjobName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cronjobNamespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CronjobRequest {
    return new CronjobRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CronjobRequest {
    return new CronjobRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CronjobRequest {
    return new CronjobRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CronjobRequest | PlainMessage<CronjobRequest> | undefined, b: CronjobRequest | PlainMessage<CronjobRequest> | undefined): boolean {
    return proto3.util.equals(CronjobRequest, a, b);
  }
}

/**
 * @generated from message sk8l.CronjobPodsRequest
 */
export class CronjobPodsRequest extends Message<CronjobPodsRequest> {
  /**
   * @generated from field: string cronjobName = 1;
   */
  cronjobName = "";

  /**
   * @generated from field: string cronjobNamespace = 2;
   */
  cronjobNamespace = "";

  constructor(data?: PartialMessage<CronjobPodsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.CronjobPodsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cronjobName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "cronjobNamespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CronjobPodsRequest {
    return new CronjobPodsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CronjobPodsRequest {
    return new CronjobPodsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CronjobPodsRequest {
    return new CronjobPodsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CronjobPodsRequest | PlainMessage<CronjobPodsRequest> | undefined, b: CronjobPodsRequest | PlainMessage<CronjobPodsRequest> | undefined): boolean {
    return proto3.util.equals(CronjobPodsRequest, a, b);
  }
}

/**
 * @generated from message sk8l.JobsRequest
 */
export class JobsRequest extends Message<JobsRequest> {
  constructor(data?: PartialMessage<JobsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.JobsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobsRequest {
    return new JobsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobsRequest {
    return new JobsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobsRequest {
    return new JobsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JobsRequest | PlainMessage<JobsRequest> | undefined, b: JobsRequest | PlainMessage<JobsRequest> | undefined): boolean {
    return proto3.util.equals(JobsRequest, a, b);
  }
}

/**
 * @generated from message sk8l.JobRequest
 */
export class JobRequest extends Message<JobRequest> {
  /**
   * @generated from field: string jobName = 1;
   */
  jobName = "";

  /**
   * @generated from field: string jobNamespace = 2;
   */
  jobNamespace = "";

  constructor(data?: PartialMessage<JobRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.JobRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "jobName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "jobNamespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobRequest {
    return new JobRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobRequest {
    return new JobRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobRequest {
    return new JobRequest().fromJsonString(jsonString, options);
  }

  static equals(a: JobRequest | PlainMessage<JobRequest> | undefined, b: JobRequest | PlainMessage<JobRequest> | undefined): boolean {
    return proto3.util.equals(JobRequest, a, b);
  }
}

/**
 * @generated from message sk8l.PodRequest
 */
export class PodRequest extends Message<PodRequest> {
  /**
   * @generated from field: string podName = 1;
   */
  podName = "";

  /**
   * @generated from field: string podNamespace = 2;
   */
  podNamespace = "";

  constructor(data?: PartialMessage<PodRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.PodRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "podName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "podNamespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PodRequest {
    return new PodRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PodRequest {
    return new PodRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PodRequest {
    return new PodRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PodRequest | PlainMessage<PodRequest> | undefined, b: PodRequest | PlainMessage<PodRequest> | undefined): boolean {
    return proto3.util.equals(PodRequest, a, b);
  }
}

/**
 * @generated from message sk8l.DashboardAnnotationsRequest
 */
export class DashboardAnnotationsRequest extends Message<DashboardAnnotationsRequest> {
  constructor(data?: PartialMessage<DashboardAnnotationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.DashboardAnnotationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DashboardAnnotationsRequest {
    return new DashboardAnnotationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DashboardAnnotationsRequest {
    return new DashboardAnnotationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DashboardAnnotationsRequest {
    return new DashboardAnnotationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DashboardAnnotationsRequest | PlainMessage<DashboardAnnotationsRequest> | undefined, b: DashboardAnnotationsRequest | PlainMessage<DashboardAnnotationsRequest> | undefined): boolean {
    return proto3.util.equals(DashboardAnnotationsRequest, a, b);
  }
}

/**
 * @generated from message sk8l.DashboardAnnotationsResponse
 */
export class DashboardAnnotationsResponse extends Message<DashboardAnnotationsResponse> {
  /**
   * @generated from field: string annotations = 1;
   */
  annotations = "";

  constructor(data?: PartialMessage<DashboardAnnotationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.DashboardAnnotationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "annotations", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DashboardAnnotationsResponse {
    return new DashboardAnnotationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DashboardAnnotationsResponse {
    return new DashboardAnnotationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DashboardAnnotationsResponse {
    return new DashboardAnnotationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DashboardAnnotationsResponse | PlainMessage<DashboardAnnotationsResponse> | undefined, b: DashboardAnnotationsResponse | PlainMessage<DashboardAnnotationsResponse> | undefined): boolean {
    return proto3.util.equals(DashboardAnnotationsResponse, a, b);
  }
}

/**
 * @generated from message sk8l.CronjobsResponse
 */
export class CronjobsResponse extends Message<CronjobsResponse> {
  /**
   * @generated from field: repeated sk8l.CronjobResponse cronjobs = 5;
   */
  cronjobs: CronjobResponse[] = [];

  /**
   * @generated from field: repeated sk8l.JobResponse activeJobs = 4 [json_name = "active_jobs"];
   */
  activeJobs: JobResponse[] = [];

  /**
   * @generated from field: repeated sk8l.PodResponse jobsPods = 3 [json_name = "jobs_pods"];
   */
  jobsPods: PodResponse[] = [];

  constructor(data?: PartialMessage<CronjobsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.CronjobsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "cronjobs", kind: "message", T: CronjobResponse, repeated: true },
    { no: 4, name: "activeJobs", jsonName: "active_jobs", kind: "message", T: JobResponse, repeated: true },
    { no: 3, name: "jobsPods", jsonName: "jobs_pods", kind: "message", T: PodResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CronjobsResponse {
    return new CronjobsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CronjobsResponse {
    return new CronjobsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CronjobsResponse {
    return new CronjobsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CronjobsResponse | PlainMessage<CronjobsResponse> | undefined, b: CronjobsResponse | PlainMessage<CronjobsResponse> | undefined): boolean {
    return proto3.util.equals(CronjobsResponse, a, b);
  }
}

/**
 * @generated from message sk8l.JobResponse
 */
export class JobResponse extends Message<JobResponse> {
  /**
   * @generated from field: k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
   */
  metadata?: ObjectMeta;

  /**
   * @generated from field: k8s.io.api.batch.v1.JobSpec spec = 2;
   */
  spec?: JobSpec;

  /**
   * remove?
   *
   * @generated from field: k8s.io.api.batch.v1.JobStatus jobStatus = 3;
   */
  jobStatus?: JobStatus;

  /**
   * @generated from field: string name = 4;
   */
  name = "";

  /**
   * @generated from field: string namespace = 5;
   */
  namespace = "";

  /**
   * @generated from field: string creationTimestamp = 6 [json_name = "creation_timestamp"];
   */
  creationTimestamp = "";

  /**
   * More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names#uids
   *
   * @generated from field: string Uuid = 7 [json_name = "uid"];
   */
  Uuid = "";

  /**
   * @generated from field: int64 generation = 8;
   */
  generation = protoInt64.zero;

  /**
   * @generated from field: string duration = 9;
   */
  duration = "";

  /**
   * @generated from field: int64 durationInS = 10 [json_name = "duration_in_s"];
   */
  durationInS = protoInt64.zero;

  /**
   * @generated from field: sk8l_custom.JobStatus status = 11;
   */
  status?: JobStatus$1;

  /**
   * @generated from field: bool succeeded = 12;
   */
  succeeded = false;

  /**
   * @generated from field: bool failed = 13 [json_name = "failure"];
   */
  failed = false;

  /**
   * @generated from field: k8s.io.api.batch.v1.JobCondition failureCondition = 14 [json_name = "failure_condition"];
   */
  failureCondition?: JobCondition;

  /**
   * @generated from field: repeated sk8l.PodResponse pods = 15;
   */
  pods: PodResponse[] = [];

  /**
   * @generated from field: repeated sk8l.TerminationReason terminationReasons = 16 [json_name = "termination_reasons"];
   */
  terminationReasons: TerminationReason[] = [];

  constructor(data?: PartialMessage<JobResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.JobResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ObjectMeta },
    { no: 2, name: "spec", kind: "message", T: JobSpec },
    { no: 3, name: "jobStatus", kind: "message", T: JobStatus },
    { no: 4, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "creationTimestamp", jsonName: "creation_timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "Uuid", jsonName: "uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "generation", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "duration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "durationInS", jsonName: "duration_in_s", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 11, name: "status", kind: "message", T: JobStatus$1 },
    { no: 12, name: "succeeded", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "failed", jsonName: "failure", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "failureCondition", jsonName: "failure_condition", kind: "message", T: JobCondition },
    { no: 15, name: "pods", kind: "message", T: PodResponse, repeated: true },
    { no: 16, name: "terminationReasons", jsonName: "termination_reasons", kind: "message", T: TerminationReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobResponse {
    return new JobResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobResponse {
    return new JobResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobResponse {
    return new JobResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JobResponse | PlainMessage<JobResponse> | undefined, b: JobResponse | PlainMessage<JobResponse> | undefined): boolean {
    return proto3.util.equals(JobResponse, a, b);
  }
}

/**
 * @generated from message sk8l.JobsResponse
 */
export class JobsResponse extends Message<JobsResponse> {
  /**
   * @generated from field: repeated sk8l.JobResponse jobs = 1;
   */
  jobs: JobResponse[] = [];

  constructor(data?: PartialMessage<JobsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.JobsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "jobs", kind: "message", T: JobResponse, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobsResponse {
    return new JobsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobsResponse {
    return new JobsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobsResponse {
    return new JobsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JobsResponse | PlainMessage<JobsResponse> | undefined, b: JobsResponse | PlainMessage<JobsResponse> | undefined): boolean {
    return proto3.util.equals(JobsResponse, a, b);
  }
}

/**
 * @generated from message sk8l.CronjobYAMLResponse
 */
export class CronjobYAMLResponse extends Message<CronjobYAMLResponse> {
  /**
   * @generated from field: string cronjob = 1;
   */
  cronjob = "";

  constructor(data?: PartialMessage<CronjobYAMLResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.CronjobYAMLResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cronjob", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CronjobYAMLResponse {
    return new CronjobYAMLResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CronjobYAMLResponse {
    return new CronjobYAMLResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CronjobYAMLResponse {
    return new CronjobYAMLResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CronjobYAMLResponse | PlainMessage<CronjobYAMLResponse> | undefined, b: CronjobYAMLResponse | PlainMessage<CronjobYAMLResponse> | undefined): boolean {
    return proto3.util.equals(CronjobYAMLResponse, a, b);
  }
}

/**
 * @generated from message sk8l.JobYAMLResponse
 */
export class JobYAMLResponse extends Message<JobYAMLResponse> {
  /**
   * @generated from field: string job = 1;
   */
  job = "";

  constructor(data?: PartialMessage<JobYAMLResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.JobYAMLResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "job", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobYAMLResponse {
    return new JobYAMLResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobYAMLResponse {
    return new JobYAMLResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobYAMLResponse {
    return new JobYAMLResponse().fromJsonString(jsonString, options);
  }

  static equals(a: JobYAMLResponse | PlainMessage<JobYAMLResponse> | undefined, b: JobYAMLResponse | PlainMessage<JobYAMLResponse> | undefined): boolean {
    return proto3.util.equals(JobYAMLResponse, a, b);
  }
}

/**
 * @generated from message sk8l.PodYAMLResponse
 */
export class PodYAMLResponse extends Message<PodYAMLResponse> {
  /**
   * @generated from field: string pod = 1;
   */
  pod = "";

  constructor(data?: PartialMessage<PodYAMLResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.PodYAMLResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pod", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PodYAMLResponse {
    return new PodYAMLResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PodYAMLResponse {
    return new PodYAMLResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PodYAMLResponse {
    return new PodYAMLResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PodYAMLResponse | PlainMessage<PodYAMLResponse> | undefined, b: PodYAMLResponse | PlainMessage<PodYAMLResponse> | undefined): boolean {
    return proto3.util.equals(PodYAMLResponse, a, b);
  }
}

/**
 * @generated from message sk8l.PodResponse
 */
export class PodResponse extends Message<PodResponse> {
  /**
   * @generated from field: k8s.io.apimachinery.pkg.apis.meta.v1.ObjectMeta metadata = 1;
   */
  metadata?: ObjectMeta;

  /**
   * @generated from field: k8s.io.api.core.v1.PodSpec spec = 2;
   */
  spec?: PodSpec;

  /**
   * @generated from field: k8s.io.api.core.v1.PodStatus status = 3;
   */
  status?: PodStatus;

  /**
   * @generated from field: string phase = 4;
   */
  phase = "";

  /**
   * @generated from field: sk8l.TerminatedContainers terminatedContainers = 5 [json_name = "terminated_containers"];
   */
  terminatedContainers?: TerminatedContainers;

  /**
   * @generated from field: sk8l.TerminatedContainers failedContainers = 6 [json_name = "failed_containers"];
   */
  failedContainers?: TerminatedContainers;

  /**
   * @generated from field: bool failed = 7;
   */
  failed = false;

  /**
   * @generated from field: repeated sk8l.TerminationReason terminationReasons = 8 [json_name = "termination_reasons"];
   */
  terminationReasons: TerminationReason[] = [];

  /**
   * @generated from field: k8s.io.apimachinery.pkg.apis.meta.v1.Time FinishedAt = 9 [json_name = "finished_at"];
   */
  FinishedAt?: Time;

  constructor(data?: PartialMessage<PodResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.PodResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "metadata", kind: "message", T: ObjectMeta },
    { no: 2, name: "spec", kind: "message", T: PodSpec },
    { no: 3, name: "status", kind: "message", T: PodStatus },
    { no: 4, name: "phase", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "terminatedContainers", jsonName: "terminated_containers", kind: "message", T: TerminatedContainers },
    { no: 6, name: "failedContainers", jsonName: "failed_containers", kind: "message", T: TerminatedContainers },
    { no: 7, name: "failed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "terminationReasons", jsonName: "termination_reasons", kind: "message", T: TerminationReason, repeated: true },
    { no: 9, name: "FinishedAt", jsonName: "finished_at", kind: "message", T: Time },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PodResponse {
    return new PodResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PodResponse {
    return new PodResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PodResponse {
    return new PodResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PodResponse | PlainMessage<PodResponse> | undefined, b: PodResponse | PlainMessage<PodResponse> | undefined): boolean {
    return proto3.util.equals(PodResponse, a, b);
  }
}

/**
 * @generated from message sk8l.ContainerCommands
 */
export class ContainerCommands extends Message<ContainerCommands> {
  /**
   * @generated from field: repeated string commands = 1;
   */
  commands: string[] = [];

  constructor(data?: PartialMessage<ContainerCommands>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.ContainerCommands";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commands", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContainerCommands {
    return new ContainerCommands().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContainerCommands {
    return new ContainerCommands().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContainerCommands {
    return new ContainerCommands().fromJsonString(jsonString, options);
  }

  static equals(a: ContainerCommands | PlainMessage<ContainerCommands> | undefined, b: ContainerCommands | PlainMessage<ContainerCommands> | undefined): boolean {
    return proto3.util.equals(ContainerCommands, a, b);
  }
}

/**
 * @generated from message sk8l.ContainerResponse
 */
export class ContainerResponse extends Message<ContainerResponse> {
  /**
   * @generated from field: k8s.io.api.core.v1.ContainerStatus status = 1;
   */
  status?: ContainerStatus;

  /**
   * @generated from field: string phase = 2;
   */
  phase = "";

  /**
   * @generated from field: repeated k8s.io.api.core.v1.PodCondition conditions = 3;
   */
  conditions: PodCondition[] = [];

  /**
   * @generated from field: sk8l.TerminationReason terminatedReason = 4;
   */
  terminatedReason?: TerminationReason;

  constructor(data?: PartialMessage<ContainerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.ContainerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "status", kind: "message", T: ContainerStatus },
    { no: 2, name: "phase", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "conditions", kind: "message", T: PodCondition, repeated: true },
    { no: 4, name: "terminatedReason", kind: "message", T: TerminationReason },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContainerResponse {
    return new ContainerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContainerResponse {
    return new ContainerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContainerResponse {
    return new ContainerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ContainerResponse | PlainMessage<ContainerResponse> | undefined, b: ContainerResponse | PlainMessage<ContainerResponse> | undefined): boolean {
    return proto3.util.equals(ContainerResponse, a, b);
  }
}

/**
 * @generated from message sk8l.TerminationReason
 */
export class TerminationReason extends Message<TerminationReason> {
  /**
   * @generated from field: k8s.io.api.core.v1.ContainerStateTerminated terminationDetails = 1;
   */
  terminationDetails?: ContainerStateTerminated;

  /**
   * @generated from field: string containerName = 2 [json_name = "container_name"];
   */
  containerName = "";

  constructor(data?: PartialMessage<TerminationReason>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.TerminationReason";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "terminationDetails", kind: "message", T: ContainerStateTerminated },
    { no: 2, name: "containerName", jsonName: "container_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminationReason {
    return new TerminationReason().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminationReason {
    return new TerminationReason().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminationReason {
    return new TerminationReason().fromJsonString(jsonString, options);
  }

  static equals(a: TerminationReason | PlainMessage<TerminationReason> | undefined, b: TerminationReason | PlainMessage<TerminationReason> | undefined): boolean {
    return proto3.util.equals(TerminationReason, a, b);
  }
}

/**
 * @generated from message sk8l.TerminatedContainers
 */
export class TerminatedContainers extends Message<TerminatedContainers> {
  /**
   * @generated from field: repeated sk8l.ContainerResponse initContainers = 1 [json_name = "init_containers"];
   */
  initContainers: ContainerResponse[] = [];

  /**
   * @generated from field: repeated sk8l.ContainerResponse containers = 2;
   */
  containers: ContainerResponse[] = [];

  /**
   * @generated from field: repeated sk8l.ContainerResponse ephemeralContainers = 3 [json_name = "ephemeral_containers"];
   */
  ephemeralContainers: ContainerResponse[] = [];

  /**
   * @generated from field: repeated sk8l.TerminationReason terminationReasons = 4 [json_name = "termination_reasons"];
   */
  terminationReasons: TerminationReason[] = [];

  constructor(data?: PartialMessage<TerminatedContainers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.TerminatedContainers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "initContainers", jsonName: "init_containers", kind: "message", T: ContainerResponse, repeated: true },
    { no: 2, name: "containers", kind: "message", T: ContainerResponse, repeated: true },
    { no: 3, name: "ephemeralContainers", jsonName: "ephemeral_containers", kind: "message", T: ContainerResponse, repeated: true },
    { no: 4, name: "terminationReasons", jsonName: "termination_reasons", kind: "message", T: TerminationReason, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TerminatedContainers {
    return new TerminatedContainers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TerminatedContainers {
    return new TerminatedContainers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TerminatedContainers {
    return new TerminatedContainers().fromJsonString(jsonString, options);
  }

  static equals(a: TerminatedContainers | PlainMessage<TerminatedContainers> | undefined, b: TerminatedContainers | PlainMessage<TerminatedContainers> | undefined): boolean {
    return proto3.util.equals(TerminatedContainers, a, b);
  }
}

/**
 * @generated from message sk8l.CronjobResponse
 */
export class CronjobResponse extends Message<CronjobResponse> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string namespace = 2;
   */
  namespace = "";

  /**
   * @generated from field: string uid = 3;
   */
  uid = "";

  /**
   * @generated from field: map<string, sk8l.ContainerCommands> containerCommands = 4 [json_name = "container_commands"];
   */
  containerCommands: { [key: string]: ContainerCommands } = {};

  /**
   * @generated from field: string creationTimestamp = 5 [json_name = "creation_timestamp"];
   */
  creationTimestamp = "";

  /**
   * @generated from field: string definition = 6;
   */
  definition = "";

  /**
   * @generated from field: string lastSuccessfulTime = 7 [json_name = "last_successful_time"];
   */
  lastSuccessfulTime = "";

  /**
   * @generated from field: string lastScheduleTime = 8 [json_name = "last_schedule_time"];
   */
  lastScheduleTime = "";

  /**
   * @generated from field: bool active = 10;
   */
  active = false;

  /**
   * @generated from field: repeated sk8l.JobResponse jobs = 11;
   */
  jobs: JobResponse[] = [];

  /**
   * @generated from field: repeated sk8l.JobResponse runningJobs = 12 [json_name = "running_jobs"];
   */
  runningJobs: JobResponse[] = [];

  /**
   * @generated from field: repeated sk8l.PodResponse runningJobsPods = 13 [json_name = "running_jobs_pods"];
   */
  runningJobsPods: PodResponse[] = [];

  /**
   * @generated from field: repeated sk8l.PodResponse jobsPods = 14 [json_name = "jobs_pods"];
   */
  jobsPods: PodResponse[] = [];

  /**
   * @generated from field: int64 lastDuration = 15 [json_name = "last_duration"];
   */
  lastDuration = protoInt64.zero;

  /**
   * @generated from field: int64 currentDuration = 16 [json_name = "current_duration"];
   */
  currentDuration = protoInt64.zero;

  /**
   * @generated from field: k8s.io.api.batch.v1.CronJobSpec spec = 17;
   */
  spec?: CronJobSpec;

  /**
   * @generated from field: bool failed = 18;
   */
  failed = false;

  constructor(data?: PartialMessage<CronjobResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.CronjobResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "namespace", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "uid", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "containerCommands", jsonName: "container_commands", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: ContainerCommands} },
    { no: 5, name: "creationTimestamp", jsonName: "creation_timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "definition", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "lastSuccessfulTime", jsonName: "last_successful_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "lastScheduleTime", jsonName: "last_schedule_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "jobs", kind: "message", T: JobResponse, repeated: true },
    { no: 12, name: "runningJobs", jsonName: "running_jobs", kind: "message", T: JobResponse, repeated: true },
    { no: 13, name: "runningJobsPods", jsonName: "running_jobs_pods", kind: "message", T: PodResponse, repeated: true },
    { no: 14, name: "jobsPods", jsonName: "jobs_pods", kind: "message", T: PodResponse, repeated: true },
    { no: 15, name: "lastDuration", jsonName: "last_duration", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 16, name: "currentDuration", jsonName: "current_duration", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 17, name: "spec", kind: "message", T: CronJobSpec },
    { no: 18, name: "failed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CronjobResponse {
    return new CronjobResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CronjobResponse {
    return new CronjobResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CronjobResponse {
    return new CronjobResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CronjobResponse | PlainMessage<CronjobResponse> | undefined, b: CronjobResponse | PlainMessage<CronjobResponse> | undefined): boolean {
    return proto3.util.equals(CronjobResponse, a, b);
  }
}

/**
 * @generated from message sk8l.CronjobPodsResponse
 */
export class CronjobPodsResponse extends Message<CronjobPodsResponse> {
  /**
   * @generated from field: repeated sk8l.PodResponse pods = 1;
   */
  pods: PodResponse[] = [];

  /**
   * @generated from field: sk8l.CronjobResponse cronjob = 2;
   */
  cronjob?: CronjobResponse;

  constructor(data?: PartialMessage<CronjobPodsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.CronjobPodsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pods", kind: "message", T: PodResponse, repeated: true },
    { no: 2, name: "cronjob", kind: "message", T: CronjobResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CronjobPodsResponse {
    return new CronjobPodsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CronjobPodsResponse {
    return new CronjobPodsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CronjobPodsResponse {
    return new CronjobPodsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CronjobPodsResponse | PlainMessage<CronjobPodsResponse> | undefined, b: CronjobPodsResponse | PlainMessage<CronjobPodsResponse> | undefined): boolean {
    return proto3.util.equals(CronjobPodsResponse, a, b);
  }
}

/**
 * @generated from message sk8l.JobList
 */
export class JobList extends Message<JobList> {
  /**
   * @generated from field: repeated k8s.io.api.batch.v1.Job Items = 1;
   */
  Items: Job[] = [];

  constructor(data?: PartialMessage<JobList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.JobList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "Items", kind: "message", T: Job, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): JobList {
    return new JobList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): JobList {
    return new JobList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): JobList {
    return new JobList().fromJsonString(jsonString, options);
  }

  static equals(a: JobList | PlainMessage<JobList> | undefined, b: JobList | PlainMessage<JobList> | undefined): boolean {
    return proto3.util.equals(JobList, a, b);
  }
}

/**
 * @generated from message sk8l.MappedJobs
 */
export class MappedJobs extends Message<MappedJobs> {
  /**
   * google.protobuf.ListValue Jobs = 1;
   *
   * @generated from field: map<string, sk8l.JobList> JobLists = 1;
   */
  JobLists: { [key: string]: JobList } = {};

  constructor(data?: PartialMessage<MappedJobs>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "sk8l.MappedJobs";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "JobLists", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: JobList} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MappedJobs {
    return new MappedJobs().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MappedJobs {
    return new MappedJobs().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MappedJobs {
    return new MappedJobs().fromJsonString(jsonString, options);
  }

  static equals(a: MappedJobs | PlainMessage<MappedJobs> | undefined, b: MappedJobs | PlainMessage<MappedJobs> | undefined): boolean {
    return proto3.util.equals(MappedJobs, a, b);
  }
}

