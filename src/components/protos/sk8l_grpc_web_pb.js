/**
 * @fileoverview gRPC-Web generated client stub for sk8l
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.24.3
// source: sk8l.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var k8s_io_apimachinery_pkg_apis_meta_v1_generated_pb = require('./k8s.io/apimachinery/pkg/apis/meta/v1/generated_pb.js')

var k8s_io_api_batch_v1_generated_pb = require('./k8s.io/api/batch/v1/generated_pb.js')

var k8s_io_api_core_v1_generated_pb = require('./k8s.io/api/core/v1/generated_pb.js')

var sk8l_custom_pb = require('./sk8l_custom_pb.js')
const proto = {};
proto.sk8l = require('./sk8l_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.sk8l.CronjobClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.sk8l.CronjobPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.sk8l.CronjobsRequest,
 *   !proto.sk8l.CronjobsResponse>}
 */
const methodDescriptor_Cronjob_GetCronjobs = new grpc.web.MethodDescriptor(
  '/sk8l.Cronjob/GetCronjobs',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.sk8l.CronjobsRequest,
  proto.sk8l.CronjobsResponse,
  /**
   * @param {!proto.sk8l.CronjobsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.sk8l.CronjobsResponse.deserializeBinary
);


/**
 * @param {!proto.sk8l.CronjobsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.sk8l.CronjobsResponse>}
 *     The XHR Node Readable Stream
 */
proto.sk8l.CronjobClient.prototype.getCronjobs =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/sk8l.Cronjob/GetCronjobs',
      request,
      metadata || {},
      methodDescriptor_Cronjob_GetCronjobs);
};


/**
 * @param {!proto.sk8l.CronjobsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.sk8l.CronjobsResponse>}
 *     The XHR Node Readable Stream
 */
proto.sk8l.CronjobPromiseClient.prototype.getCronjobs =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/sk8l.Cronjob/GetCronjobs',
      request,
      metadata || {},
      methodDescriptor_Cronjob_GetCronjobs);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.sk8l.CronjobRequest,
 *   !proto.sk8l.CronjobResponse>}
 */
const methodDescriptor_Cronjob_GetCronjob = new grpc.web.MethodDescriptor(
  '/sk8l.Cronjob/GetCronjob',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.sk8l.CronjobRequest,
  proto.sk8l.CronjobResponse,
  /**
   * @param {!proto.sk8l.CronjobRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.sk8l.CronjobResponse.deserializeBinary
);


/**
 * @param {!proto.sk8l.CronjobRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.sk8l.CronjobResponse>}
 *     The XHR Node Readable Stream
 */
proto.sk8l.CronjobClient.prototype.getCronjob =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/sk8l.Cronjob/GetCronjob',
      request,
      metadata || {},
      methodDescriptor_Cronjob_GetCronjob);
};


/**
 * @param {!proto.sk8l.CronjobRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.sk8l.CronjobResponse>}
 *     The XHR Node Readable Stream
 */
proto.sk8l.CronjobPromiseClient.prototype.getCronjob =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/sk8l.Cronjob/GetCronjob',
      request,
      metadata || {},
      methodDescriptor_Cronjob_GetCronjob);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.sk8l.CronjobPodsRequest,
 *   !proto.sk8l.CronjobPodsResponse>}
 */
const methodDescriptor_Cronjob_GetCronjobPods = new grpc.web.MethodDescriptor(
  '/sk8l.Cronjob/GetCronjobPods',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.sk8l.CronjobPodsRequest,
  proto.sk8l.CronjobPodsResponse,
  /**
   * @param {!proto.sk8l.CronjobPodsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.sk8l.CronjobPodsResponse.deserializeBinary
);


/**
 * @param {!proto.sk8l.CronjobPodsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.sk8l.CronjobPodsResponse>}
 *     The XHR Node Readable Stream
 */
proto.sk8l.CronjobClient.prototype.getCronjobPods =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/sk8l.Cronjob/GetCronjobPods',
      request,
      metadata || {},
      methodDescriptor_Cronjob_GetCronjobPods);
};


/**
 * @param {!proto.sk8l.CronjobPodsRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.sk8l.CronjobPodsResponse>}
 *     The XHR Node Readable Stream
 */
proto.sk8l.CronjobPromiseClient.prototype.getCronjobPods =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/sk8l.Cronjob/GetCronjobPods',
      request,
      metadata || {},
      methodDescriptor_Cronjob_GetCronjobPods);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.sk8l.CronjobRequest,
 *   !proto.sk8l.CronjobYAMLResponse>}
 */
const methodDescriptor_Cronjob_GetCronjobYAML = new grpc.web.MethodDescriptor(
  '/sk8l.Cronjob/GetCronjobYAML',
  grpc.web.MethodType.UNARY,
  proto.sk8l.CronjobRequest,
  proto.sk8l.CronjobYAMLResponse,
  /**
   * @param {!proto.sk8l.CronjobRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.sk8l.CronjobYAMLResponse.deserializeBinary
);


/**
 * @param {!proto.sk8l.CronjobRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.sk8l.CronjobYAMLResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.sk8l.CronjobYAMLResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.sk8l.CronjobClient.prototype.getCronjobYAML =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/sk8l.Cronjob/GetCronjobYAML',
      request,
      metadata || {},
      methodDescriptor_Cronjob_GetCronjobYAML,
      callback);
};


/**
 * @param {!proto.sk8l.CronjobRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.sk8l.CronjobYAMLResponse>}
 *     Promise that resolves to the response
 */
proto.sk8l.CronjobPromiseClient.prototype.getCronjobYAML =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/sk8l.Cronjob/GetCronjobYAML',
      request,
      metadata || {},
      methodDescriptor_Cronjob_GetCronjobYAML);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.sk8l.JobRequest,
 *   !proto.sk8l.JobYAMLResponse>}
 */
const methodDescriptor_Cronjob_GetJobYAML = new grpc.web.MethodDescriptor(
  '/sk8l.Cronjob/GetJobYAML',
  grpc.web.MethodType.UNARY,
  proto.sk8l.JobRequest,
  proto.sk8l.JobYAMLResponse,
  /**
   * @param {!proto.sk8l.JobRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.sk8l.JobYAMLResponse.deserializeBinary
);


/**
 * @param {!proto.sk8l.JobRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.sk8l.JobYAMLResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.sk8l.JobYAMLResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.sk8l.CronjobClient.prototype.getJobYAML =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/sk8l.Cronjob/GetJobYAML',
      request,
      metadata || {},
      methodDescriptor_Cronjob_GetJobYAML,
      callback);
};


/**
 * @param {!proto.sk8l.JobRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.sk8l.JobYAMLResponse>}
 *     Promise that resolves to the response
 */
proto.sk8l.CronjobPromiseClient.prototype.getJobYAML =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/sk8l.Cronjob/GetJobYAML',
      request,
      metadata || {},
      methodDescriptor_Cronjob_GetJobYAML);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.sk8l.PodRequest,
 *   !proto.sk8l.PodYAMLResponse>}
 */
const methodDescriptor_Cronjob_GetPodYAML = new grpc.web.MethodDescriptor(
  '/sk8l.Cronjob/GetPodYAML',
  grpc.web.MethodType.UNARY,
  proto.sk8l.PodRequest,
  proto.sk8l.PodYAMLResponse,
  /**
   * @param {!proto.sk8l.PodRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.sk8l.PodYAMLResponse.deserializeBinary
);


/**
 * @param {!proto.sk8l.PodRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.sk8l.PodYAMLResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.sk8l.PodYAMLResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.sk8l.CronjobClient.prototype.getPodYAML =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/sk8l.Cronjob/GetPodYAML',
      request,
      metadata || {},
      methodDescriptor_Cronjob_GetPodYAML,
      callback);
};


/**
 * @param {!proto.sk8l.PodRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.sk8l.PodYAMLResponse>}
 *     Promise that resolves to the response
 */
proto.sk8l.CronjobPromiseClient.prototype.getPodYAML =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/sk8l.Cronjob/GetPodYAML',
      request,
      metadata || {},
      methodDescriptor_Cronjob_GetPodYAML);
};


module.exports = proto.sk8l;

